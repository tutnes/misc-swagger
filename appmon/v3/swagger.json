{
  "swagger": "2.0",
  "info": {
    "description": "The AppMon Server exposes management and integration functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with the AppMon Server.\n\nThe HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can typically occur in our REST interface:\n\n* **400** - Bad Request: Some request parameters are not correct.\n* **401** - Unauthorized: A valid authorization header (Basic Authentication) is required but is not available.\n* **403** - Forbidden: Execution of request is not allowed, e.g. the user has no privileges.\n* **404** - Not Found: Endpoint does not exist or some entities could not be found, e.g. System Profile.\n* **500** - Internal Server Error: See response body for details.\n\nAdditional [usage examples](https://www.dynatrace.com/support/doc/appmon71/shortlink/id_server_rest_examples) can be found in the AppMon documentation.\n",
    "version": "3",
    "title": "AppMon Server REST API"
  },
  "basePath": "/api/v3",
  "tags": [
    {
      "name": "Tasks and Monitors"
    },
    {
      "name": "Live Sessions"
    },
    {
      "name": "Stored Sessions"
    },
    {
      "name": "Server Management"
    },
    {
      "name": "PureLytics Stream"
    },
    {
      "name": "Agent Groups"
    },
    {
      "name": "Test Automation"
    },
    {
      "name": "Alerts (Incidents) and Events"
    },
    {
      "name": "Integration"
    },
    {
      "name": "Business Hours"
    },
    {
      "name": "Mobile Symbolication Service"
    },
    {
      "name": "License Reservations"
    },
    {
      "name": "System Profiles"
    },
    {
      "name": "User Management"
    }
  ],
  "paths": {
    "/alerts": {
      "get": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "List Alerts",
        "description": "Get a list of all alerts (incidents) that match the filter settings. If no start and end date is specified, a default time frame of three days is selected.",
        "operationId": "getIncidents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": false,
            "type": "string"
          },
          {
            "name": "incidentrule",
            "in": "query",
            "description": "Incident Rule name",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Alert state",
            "required": false,
            "type": "string",
            "enum": [
              "Created",
              "InProgress",
              "Confirmed"
            ]
          },
          {
            "name": "from",
            "in": "query",
            "description": "Minimum start date of the alert (ISO8601)",
            "required": false,
            "type": "string",
            "x-example": "2016-05-11T11:35:31.170+02:00"
          },
          {
            "name": "to",
            "in": "query",
            "description": "Maximum end date of the alert (ISO8601)",
            "required": false,
            "type": "string",
            "x-example": "2016-05-11T11:35:31.170+02:00"
          }
        ],
        "responses": {
          "200": {
            "description": "List of alerts in response body",
            "schema": {
              "$ref": "#/definitions/Alerts"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Create Alert",
        "description": "Create an alert (incident) for a System Profile and Incident Rule. The request must contain the alert as JSON representation. If the request does not contain a start and end date, the the current server time will be used. The default severity is 'informational' and the default state is 'Created'. \nAlerts with a severity of 'informational' are automatically set to state 'Confirmed'. You can set such alerts to other states with a subsequent update. \nIt is possible to specify the start date and leave the end date unset, the end date can then be provided later with an update. \nAt least the JSON properties 'systemprofile' and 'message' have to be specified.",
        "operationId": "createIncident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Alert record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "404": {
            "description": "Not Found: System Profile or Incident Rule could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/alerts/{alertid}": {
      "get": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Get Alert record",
        "description": "Get the JSON representation of an alert (incident).",
        "operationId": "getIncident",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertid",
            "in": "path",
            "description": "ID of alert",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alert representation in response body",
            "schema": {
              "$ref": "#/definitions/Alert Response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Update Alert record",
        "description": "Several attributes of an alert (incident) can be modified by updating it. You can either retrieve the alert record via the GET call first and then send the modified JSON object, or you could make a partial update by providing only the properties that should get updated. The alert will be implicitly closed by the update with the current server time as end time if no specific end time is provided.",
        "operationId": "updateIncident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertid",
            "in": "path",
            "description": "ID of alert",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Alert record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert Update"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Delete Alert record",
        "description": "Permanently delete an alert (incident) record.",
        "operationId": "deleteIncident",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "alertid",
            "in": "path",
            "description": "ID of alert",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/alertsuppression": {
      "get": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "List Alert Suppressions",
        "description": "Get a list of all existing alert suppressions (incident downtimes). The response can optionally be filtered by either a System Profile or a combination of System Profile and Incident rule. The response contains the URL and the name of each alert suppression.",
        "operationId": "getDowntimes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": false,
            "type": "string"
          },
          {
            "name": "incidentrule",
            "in": "query",
            "description": "Incident Rule name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of alert suppressions in response body",
            "schema": {
              "$ref": "#/definitions/Alert Suppressions"
            }
          }
        }
      }
    },
    "/alertsuppression/{suppressionname}": {
      "get": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Get Alert Suppression",
        "description": "Gets the JSON representation of an existing alert suppression (incident downtime).",
        "operationId": "getDowntime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "suppressionname",
            "in": "path",
            "description": "Alert Suppression name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alert suppression representation in response body",
            "schema": {
              "$ref": "#/definitions/Alert Suppression"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Create or replace Alert Suppression",
        "description": "Create an alert suppression (incident downtime) by sending a JSON representation as the request body. If an alert suppression with the given name already exists, it will be replaced by the newly created alert suppression. \n\nYou can either create a one-time suppression by setting the JSON property 'once' to 'true', or create a repeatedly scheduled suppression by providing either a Quartz cron expression or a reference to business hours defined in the self-monitoring System Profile. Referencing business hours means the alert suppression will be active outside the defined business hours. Setting a duration will have no effect if business hours are referenced.\n\nYou can create a global alert suppression (= affecting all existing and future System Profiles and Incident rules) by leaving System Profiles and Incident rules unspecified.",
        "operationId": "putDowntime",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "suppressionname",
            "in": "path",
            "description": "Alert Suppression name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Alert Suppression object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Alert Suppression Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          },
          "404": {
            "description": "Not Found: System Profile or Incident Rule could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Delete Alert Suppression",
        "description": "Deletes an existing alert suppression (incident downtime).",
        "operationId": "deleteDowntime",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "suppressionname",
            "in": "path",
            "description": "Alert Suppression name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/dss/info": {
      "head": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Get DSS info",
        "description": "Tells the DSS status plus the version, the number of mapping files, disk space available and used and disk quota (if any).",
        "operationId": "info",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "DSS info in header",
            "headers": {
              "dss-status": {
                "type": "string",
                "description": "Status of DSS service"
              },
              "storage-used": {
                "type": "string",
                "description": "Symbol file storage used"
              },
              "dss-op-status": {
                "type": "string",
                "description": "Result of the operation"
              },
              "dss-op": {
                "type": "string",
                "description": "Operation description"
              },
              "dss-version": {
                "type": "string",
                "description": "Version of DSS service"
              },
              "storage-available": {
                "type": "string",
                "description": "Available symbol file storage space"
              },
              "storage-quota": {
                "type": "string",
                "description": "Storage quota (Number or \"No Quota\")"
              },
              "storage-file-count": {
                "type": "string",
                "description": "Number of files in symbol file storage"
              }
            }
          },
          "503": {
            "description": "DSS Service not available",
            "headers": {
              "INFO": {
                "type": "string",
                "description": "Error message"
              }
            }
          }
        }
      }
    },
    "/dss/status": {
      "head": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Get DSS status",
        "description": "The dss-* header items tell whether the ProGuard libraries or the Symbol File Manager are configured and the DSS is enabled / running.",
        "operationId": "status",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "204": {
            "description": "DSS status in header",
            "headers": {
              "dss-status": {
                "type": "string",
                "description": "Status of DSS service"
              },
              "dss-op-status": {
                "type": "string",
                "description": "Result of the operation"
              },
              "dss-op": {
                "type": "string",
                "description": "Operation description"
              }
            }
          }
        }
      }
    },
    "/dss/symbolfiles": {
      "get": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "List symbol files",
        "description": "List all iOS symbol extract files and ProGuard mapping files.",
        "operationId": "listAllSymbolFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of symbol files in response body",
            "schema": {
              "$ref": "#/definitions/DSS List Response"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      }
    },
    "/dss/symbolfiles/{os}": {
      "get": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "List symbol files per operating system",
        "description": "List all symbol extract files (iOS) or ProGuard mapping files (Android).",
        "operationId": "listSymbolFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "List of symbol files in response body",
            "schema": {
              "$ref": "#/definitions/DSS List Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      }
    },
    "/dss/symbolfiles/{os}/apps/{appname}": {
      "get": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "List symbol files per application",
        "description": "List all symbol extract files (iOS) or ProGuard mapping files (Android) for a specific application.",
        "operationId": "listSymbolFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of symbol files in response body",
            "schema": {
              "$ref": "#/definitions/DSS List Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Delete symbol files per application",
        "description": "Delete all symbol extract files (iOS) or ProGuard mapping files (Android) for a specific application with a version older than the specified version.",
        "operationId": "deleteSymbolFile",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionsOlderThan",
            "in": "query",
            "description": "Only delete files with version older than this",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion result in response body",
            "schema": {
              "$ref": "#/definitions/DSS Delete Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      }
    },
    "/dss/symbolfiles/{os}/apps/{appname}/versions/{appversion}": {
      "get": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "List symbol files per application/version",
        "description": "List all symbol extract files (iOS) or ProGuard mapping files (Android) for a specific application with a specific version.",
        "operationId": "listSymbolFiles",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "appversion",
            "in": "path",
            "description": "Application version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of symbol files in response body",
            "schema": {
              "$ref": "#/definitions/DSS List Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Upload mapping file (Android only)",
        "description": "Upload a mapping file for a specific application with a specific version via multi-part form upload. Files with ending \".zip\" or \".jar\" are assumed to be in PKZip format, all other files in plain text.\n\nAlternatively, you can send the file as an octet-stream in the request body. Be sure to specify the content-type of \"application/zip\" if the content is in PKZip format.",
        "operationId": "uploadMapFileMultiPart",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "android"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "appversion",
            "in": "path",
            "description": "Application version",
            "required": true,
            "type": "string"
          },
          {
            "name": "filename",
            "in": "formData",
            "description": "The file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Upload result in response body",
            "schema": {
              "$ref": "#/definitions/DSS Upload Response"
            }
          },
          "400": {
            "description": "Bad Request: Some request parameters are not correct.",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Delete symbol files per application/version",
        "description": "Delete all symbol extract files (iOS) or ProGuard mapping files (Android) for a specific application with a specific version.",
        "operationId": "deleteSymbolFileByVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios",
              "android"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "appversion",
            "in": "path",
            "description": "Application version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deletion result in response body",
            "schema": {
              "$ref": "#/definitions/DSS Delete Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      }
    },
    "/dss/symbolfiles/{os}/apps/{appname}/versions/{appversion}/builds/{uuid}/time/{buildtime}": {
      "put": {
        "tags": [
          "Mobile Symbolication Service"
        ],
        "summary": "Upload symbol extract file (iOS only)",
        "description": "Upload a symbol extract file via multi-part form upload for a specific application with a specific version, UUID and build time, where the UUID must be in the form of \"architecture.uuid\", e.g. \"arm64.020a290c987237f6a7d5dbb08d11ed5d\".\n\nAlternatively, you can send the file as an octet-stream in the request body. Be sure to specify the content-type of \"application/zip\" if the content is in PKZip format.",
        "operationId": "uploadExtractFileMultiPart",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "Operating system",
            "required": true,
            "type": "string",
            "enum": [
              "ios"
            ]
          },
          {
            "name": "appname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          },
          {
            "name": "appversion",
            "in": "path",
            "description": "Application version",
            "required": true,
            "type": "string"
          },
          {
            "name": "uuid",
            "in": "path",
            "description": "UUID of build",
            "required": true,
            "type": "string"
          },
          {
            "name": "buildtime",
            "in": "path",
            "description": "Timestamp of build",
            "required": true,
            "type": "string"
          },
          {
            "name": "filename",
            "in": "formData",
            "description": "The file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Upload result in response body",
            "schema": {
              "$ref": "#/definitions/DSS Upload Response"
            }
          },
          "400": {
            "description": "Bad Request: Some request parameters are not correct.",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          },
          "404": {
            "description": "Operating system not supported",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "503": {
            "description": "DSS Service not available",
            "schema": {
              "$ref": "#/definitions/DSS Response"
            }
          }
        }
      }
    },
    "/events/Deployment": {
      "post": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Create deployment event",
        "description": "Create an deployment event for a System Profile. The request must contain the event as JSON representation. If the request does not contain a start and end date, the current server time will be used. The default severity is 'informational' and the default state is 'Created'. \nEvents with a severity of 'informational' are automatically set to state 'Confirmed'. You can set such events to other states with a subsequent update. \nIt is possible to specify the start date and leave the end date unset, the end date can then be provided later with an update. \nAt least the JSON properties 'systemprofile' and 'message' have to be specified.",
        "operationId": "createDeploymentEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Event record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Deployment Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "404": {
            "description": "Not Found: System Profile could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/events/Deployment/{eventid}": {
      "get": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Get deployment event record",
        "description": "Get the JSON representation of a deployment event.",
        "operationId": "getDeploymentEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment event representation in response body",
            "schema": {
              "$ref": "#/definitions/Deployment Event"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Update deployment event record",
        "description": "Several attributes of a deployment event can be modified by updating it. You can either retrieve the event record via the GET call first and then send the modified JSON object, or you could make a partial update by providing only the properties that should get updated.",
        "operationId": "updateDeploymentEvent",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Event record",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Event Update"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Alerts (Incidents) and Events"
        ],
        "summary": "Delete deployment event record",
        "description": "Permanently delete a deployment event record.",
        "operationId": "deleteDeploymentEvent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventid",
            "in": "path",
            "description": "ID of event",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/integration/dynatrace": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List Environments",
        "description": "Get a list of all environments",
        "operationId": "getEnvironments",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of Environments in response body"
          }
        }
      }
    },
    "/integration/dynatrace/{environmentid}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Get Environment",
        "description": "Get the specified environments",
        "operationId": "getEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Environment in response body"
          },
          "404": {
            "description": "Not Found: Environment could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Integration"
        ],
        "summary": "Create or Update an Environment",
        "description": "Create a new environment or update an exiting environment.",
        "operationId": "putEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentid",
            "in": "path",
            "description": "Environment id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Environment Configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Delete Environment",
        "description": "Permanently delete an Environment.",
        "operationId": "deleteEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "environmentid",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          },
          "404": {
            "description": "Not Found: Environment could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/license/reservation": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "List Agent and UEM reservations",
        "description": "Get a list of all Agent and UEM reservations.",
        "operationId": "getAll",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all Agent assignements and UEM reservations in response body",
            "schema": {
              "$ref": "#/definitions/License Reservations Global"
            }
          }
        }
      }
    },
    "/license/reservation/agents": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Agent reservation",
        "description": "Get the Agent reservation that matches the filter settings.",
        "operationId": "getAgentReservation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string",
            "default": "<all>"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent reservation in response body",
            "schema": {
              "$ref": "#/definitions/License Reservation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Create or replace Agent reservation",
        "description": "Create an Agent reservation by sending a JSON representation as the request body. If an Agent reservation with the given settings already exists, it will be replaced by the newly created Agent reservation. ",
        "operationId": "putAgentReservation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reservation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License Reservation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Delete Agent reservation",
        "description": "Delete the Agent reservation that matches the filter settings.",
        "operationId": "deleteAgentReservation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/license/reservation/agents/agenthours": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Agent Hour reservation",
        "description": "Get the Agent Hour reservation settings that match the filter settings.",
        "operationId": "getAgentReservationAgentHours",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent Hour reservation settings in response body",
            "schema": {
              "$ref": "#/definitions/License Reservation Agent Hours"
            }
          }
        }
      },
      "put": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Create or replace Agent Hour reservation",
        "description": "Create the Agent Hour reservation settings that match the filter settings. If an Agent Hour reservation for the given System Profile and Agent Group already exists, it will be replaced by the newly created Agent Hour reservation settings.",
        "operationId": "putAgentReservationAgentHours",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Agent Hours",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License Reservation Agent Hours"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Delete Agent Hour reservation",
        "description": "Delete the Agent Hour reservation settings that match the filter settings.",
        "operationId": "deleteAgentReservationAgentHours",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/license/reservation/agents/agentunits": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Agent Unit reservation",
        "description": "Get the Agent Unit reservation settings that match the filter settings.",
        "operationId": "getAgentReservationAgentUnits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent reservation technology settings in response body",
            "schema": {
              "$ref": "#/definitions/License Reservation Agent Units"
            }
          }
        }
      },
      "put": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Create or replace Agent Unit reservation",
        "description": "Create the Agent Unit reservation settings that match the filter settings. If an Agent Unit reservation for the given System Profile and Agent Group already exists, it will be replaced by the newly created Agent Unit reservation settings.",
        "operationId": "putAgentReservationAgentUnits",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Agent Units",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License Reservation Agent Units"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Delete Agent Unit reservation",
        "description": "Delete the Agent Unit reservation settings that match the filter settings.",
        "operationId": "deleteAgentReservationAgentUnits",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/license/reservation/agents/technology": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Agent technology reservation",
        "description": "Get the Agent technology reservation settings that match the filter settings.",
        "operationId": "getAgentReservationTechnology",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "technology",
            "in": "query",
            "description": "Technology",
            "required": true,
            "type": "string",
            "enum": [
              "JAVA",
              "WOSIS",
              "SDK",
              "RIA",
              "WEBSERVER",
              "PHP",
              "MESSAGEBROKER",
              "ZOS",
              "SYSMONITORING",
              "NOSQL",
              "NODEJS",
              "DATABASE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Agent reservation technology settings in response body",
            "schema": {
              "$ref": "#/definitions/License Reservation Technology"
            }
          }
        }
      },
      "put": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Create or replace technology settings of Agent reservation",
        "description": "Create Agent reservation technology settings by sending a JSON representation as the request body. If an Agent technology reservation with the given settings already exists, it will be replaced by the newly created Agent reservation technology settings.",
        "operationId": "putAgentReservationTechnology",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reservation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License Reservation Technology"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Delete technology settings of Agent reservation",
        "description": "Delete Agent reservation technology settings that match the filter settings.",
        "operationId": "deleteAgentReservationTechnology",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroup",
            "in": "query",
            "description": "Agent Group id",
            "required": false,
            "type": "string"
          },
          {
            "name": "technology",
            "in": "query",
            "description": "Technology",
            "required": true,
            "type": "string",
            "enum": [
              "JAVA",
              "WOSIS",
              "SDK",
              "RIA",
              "WEBSERVER",
              "PHP",
              "MESSAGEBROKER",
              "ZOS",
              "SYSMONITORING",
              "NOSQL",
              "NODEJS",
              "DATABASE"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/license/reservation/uem": {
      "get": {
        "tags": [
          "License Reservations"
        ],
        "summary": "UEM reservation",
        "description": "Get the UEM reservation that matches the filter settings.",
        "operationId": "getUemReservation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "query",
            "description": "Application name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "UEM reservation in response body",
            "schema": {
              "$ref": "#/definitions/License UEM Reservation"
            }
          }
        }
      },
      "put": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Create or replace UEM reservation",
        "description": "Create a UEM reservation by sending a JSON representation as the request body. If a UEM reservation for the given System Profile and Application already exists, it will be replaced by the newly created UEM reservation. ",
        "operationId": "putUemReservation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Reservation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/License UEM Reservation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "License Reservations"
        ],
        "summary": "Delete UEM reservation",
        "description": "Delete the UEM reservation that matches the filter settings.",
        "operationId": "deleteUemReservation",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "systemprofile",
            "in": "query",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "query",
            "description": "Application",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "List System Profiles",
        "description": "Get a list of all System Profiles of the AppMon Server.",
        "operationId": "getProfiles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of System Profiles in response body",
            "schema": {
              "$ref": "#/definitions/System Profiles"
            }
          }
        }
      }
    },
    "/profiles/{profileid}": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "System Profile Metadata",
        "description": "Get a JSON representation describing the System Profile and its meta data.",
        "operationId": "getSystemProfileMetaData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "System Profile meta data in response body",
            "schema": {
              "$ref": "#/definitions/System Profile"
            }
          }
        }
      },
      "put": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Create new System Profile based on Template",
        "description": "Create a new System Profile based on a preconfigured template. System Profile templates can be configured within the AppMon Client.",
        "operationId": "putSystemProfileFromTemplate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "System Profile template reference",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Template"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "404": {
            "description": "Not Found: System Profile template could not be found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/agentgroups": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "List Agent Groups",
        "description": "Get a list of all configured Agent Groups of a specific System Profile.",
        "operationId": "getAgentGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Agent Groups in response body",
            "schema": {
              "$ref": "#/definitions/Agent Groups"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/agentgroups/{agentgroupname}": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Get Agent Group",
        "description": "Get the JSON respresentation of an Agent Group.",
        "operationId": "getAgentGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent Group representation in response body",
            "schema": {
              "$ref": "#/definitions/Agent Group"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Create or update Agent Group",
        "description": "Create an Agent Group by sending a JSON representation as the request body. If an Agent Group with the given name already exists, it will be updated with the information contained in the request body. Agent Group configuration can be copied from a System Profile template only for creation of the Agent Group, not on update.",
        "operationId": "putAgentGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Agent Group definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Agent Group Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Delete Agent Group",
        "description": "Permanently delete an Agent Group.",
        "operationId": "deleteAgentGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/agentgroups/{agentgroupname}/mappings": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "List Agent Mappings",
        "description": "Get a list of all configured Agent Mappings of a specific Agent Group.",
        "operationId": "getAgentMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Agent Mappings in response body",
            "schema": {
              "$ref": "#/definitions/Agent Mappings"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/agentgroups/{agentgroupname}/mappings/{agentmappingalias}": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Get Agent Mapping",
        "description": "Get the JSON respresentation of an Agent Mapping.",
        "operationId": "getAgentMapping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentmappingalias",
            "in": "path",
            "description": "Alias of the Agent Mapping",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Agent Mapping representation in response body",
            "schema": {
              "$ref": "#/definitions/Agent Mapping"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Create or update Agent Mapping",
        "description": "Create an Agent Mapping by sending a JSON representation as the request body. If an Agent Mapping with the given alias already exists, it will be updated with the information contained in the request body. Update requests are never interpreted as partial updates, i.e. leaving optional properties unspecified in an update request will result in a reset of these properties.",
        "operationId": "putAgentMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentmappingalias",
            "in": "path",
            "description": "Alias of the Agent Mapping",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Agent Mapping definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Agent Mapping Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "Delete Agent Mapping",
        "description": "Permanently delete an Agent Mapping.",
        "operationId": "deleteAgentMapping",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentgroupname",
            "in": "path",
            "description": "Agent Group name",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentmappingalias",
            "in": "path",
            "description": "Alias of the Agent Mapping",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/applications/{applicationname}/javascriptagent": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Download the full JavaScript agent in a single file",
        "description": "Use the full JavaScript agent if your application uses a single “application.js” file that contains the minified contents of all your JavaScript files, or if you are building a Mobile Hybrid app. For best compatibility ensure to place it as the first script that gets loaded. Make sure to properly configure the application specific settings like monitor signal URL and CORS support in the UEM configuration.",
        "operationId": "getJSInitCodeAndAgent",
        "produces": [
          "application/javascript"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/applications/{applicationname}/javascriptagent/initcode": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Download the inline script tag",
        "description": "Use this script tag to manually inject the JavaScript agent into your web application. Depending on your settings, the actual JavaScript agent file will be loaded either synchronously or asynchronously. Make sure to properly configure the application specific settings like agent location, monitor signal URL and CORS support in the UEM configuration.",
        "operationId": "getJSInitCode",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "applicationname",
            "in": "path",
            "description": "Application name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/businesshours": {
      "get": {
        "tags": [
          "Business Hours"
        ],
        "summary": "List business hours",
        "description": "Get a list of all business hours for this System Profile.",
        "operationId": "getBusinessHoursList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of business hours in response body",
            "schema": {
              "$ref": "#/definitions/Business Hours List"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/businesshours/{businesshoursname}": {
      "get": {
        "tags": [
          "Business Hours"
        ],
        "summary": "Get business hours definition",
        "description": "Get the JSON representation of a business hours definition.",
        "operationId": "getBusinessHours",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "businesshoursname",
            "in": "path",
            "description": "Business hours name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Business hours definition in response body",
            "schema": {
              "$ref": "#/definitions/Business Hours"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Business Hours"
        ],
        "summary": "Create business hours definition",
        "description": "Create a business hours definition by sending a JSON representation as the request body.",
        "operationId": "putBusinessHours",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "businesshoursname",
            "in": "path",
            "description": "Business hours name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Business hours definition",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Business Hours"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Business Hours"
        ],
        "summary": "Delete business hours definition",
        "description": "Permanently delete a business hours definition.",
        "operationId": "deleteBusinessHours",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "businesshoursname",
            "in": "path",
            "description": "Business hours name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/configurations": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "List System Profile configurations",
        "description": "Get a list of all configurations of the specified System Profile.",
        "operationId": "getSystemProfileConfigurations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of System Profile configurations in response body",
            "schema": {
              "$ref": "#/definitions/System Profile Configurations"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/configurations/{configname}/status": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Activation status of System Profile configuration",
        "description": "Retrieve the activation state of a System Profile configuration.",
        "operationId": "getSystemProfileConfigurationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "configname",
            "in": "path",
            "description": "Configuration name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activation status of the System Profile configuration in response body",
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Activate System Profile configuration",
        "description": "Change the activation state of a System Profile. Activating a configuration automatically sets all other configurations to DISABLED. Manually setting the activation state to DISABLED via this call is not allowed.",
        "operationId": "putSystemProfileConfigurationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "configname",
            "in": "path",
            "description": "Configuration name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Activation state",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/monitors": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "List monitors",
        "description": "Get a list of configured monitors for this System Profile.",
        "operationId": "getMonitors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of monitors in response body",
            "schema": {
              "$ref": "#/definitions/Monitors"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/monitors/{monitorname}": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Get monitor",
        "description": "Get the JSON representation of the monitor definition.",
        "operationId": "getMonitor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of monitors in response body",
            "schema": {
              "$ref": "#/definitions/Monitor"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Create or update monitor",
        "description": "Update the configuration of a monitor or create a new monitor of the specified type. Creation of a new monitor requires the type to be specified. Properties left unspecified will be assigned the default value of the specified type upon creation of the monitor. Only specified properties will be updated, the monitor type cannot be updated once the monitor has been created. An empty string can be used for the schedule to change the monitor to run only when manually triggered.",
        "operationId": "putMonitor",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Monitor configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Monitor Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Delete monitor",
        "description": "Permanently delete a monitor definition.",
        "operationId": "deleteMonitor",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/monitors/{monitorname}/hosts": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "List monitor hosts",
        "description": "Get a list of configured hosts of this monitor.",
        "operationId": "getHostExpressions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of hosts in response body",
            "schema": {
              "$ref": "#/definitions/Host Expressions"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Add monitor host",
        "description": "Add a new host expression to the monitor. If more than one subexpression is defined, a host has to match all subexpressions in order to match the host expression. If no host configured in the infrastructure config matches the host expression, the expression will have no effect on the monitor.",
        "operationId": "addHostExpression",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Host expression",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Host Expression"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Clear monitor hosts",
        "description": "Clear all host configurations of this monitor.",
        "operationId": "deleteHostExpressions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/monitors/{monitorname}/status": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Check monitor execution status",
        "description": "Retrieve the current execution status of the monitor.",
        "operationId": "getMonitorStateV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Monitor execution status in response body",
            "schema": {
              "$ref": "#/definitions/Execution Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Run monitor",
        "description": "Set the status to RUNNING in order to trigger a monitor execution. Other status changes are not allowed with this call.",
        "operationId": "runMonitorV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "monitorname",
            "in": "path",
            "description": "Monitor name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Execution status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution Status"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: The request has succeeded"
          }
        }
      }
    },
    "/profiles/{profileid}/session/recording": {
      "post": {
        "tags": [
          "Live Sessions"
        ],
        "summary": "Start session recording",
        "description": "Start session recording for a specific System Profile. Starting session recording is only possible for pre-production licenses.",
        "operationId": "postRecording",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Session recording options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Session Recording Options"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      }
    },
    "/profiles/{profileid}/session/recording/status": {
      "get": {
        "tags": [
          "Live Sessions"
        ],
        "summary": "Get session recording status",
        "description": "Check if the live session is currently being recorded.",
        "operationId": "getRecording",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Recording status in response body",
            "schema": {
              "$ref": "#/definitions/Recording Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Live Sessions"
        ],
        "summary": "Stop session recording",
        "description": "Set recording status to false in order to stop session recording and create a reference to the stored session. This call does not complete until all recorded data is fully processed on the Server. Depending on the environment, it can take a few minutes until an HTTP response message is received. Stopping session recording is only possible for pre-production licenses.",
        "operationId": "stopRecording",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Recording Status"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response. In case the session was being recorded before this call, the URI of the stored session is present in the Location header.",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      }
    },
    "/profiles/{profileid}/session/store": {
      "post": {
        "tags": [
          "Live Sessions"
        ],
        "summary": "Store session",
        "description": "Store all time series and PurePaths in the Server's memory to a stored session. To limit the data to be stored, specify a start time and end time in the request body, otherwise the last 30 minutes will be stored.",
        "operationId": "storeSession",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Session storing options",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Session Storing Options"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      }
    },
    "/profiles/{profileid}/status": {
      "get": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Activation status of System Profile",
        "description": "Retrieve the activation state of a System Profile.",
        "operationId": "getSystemProfileState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Activation status of the System Profile in response body",
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "System Profiles"
        ],
        "summary": "Enable/disable System Profile",
        "description": "Change the activation state of a System Profile.",
        "operationId": "putSystemProfileState",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Activation state",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/tasks": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "List tasks",
        "description": "Get a list of scheduled tasks for this System Profile.",
        "operationId": "getTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks in response body",
            "schema": {
              "$ref": "#/definitions/Tasks"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/tasks/{taskname}": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Get task",
        "description": "Get the JSON representation of the task definition.",
        "operationId": "getTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskname",
            "in": "path",
            "description": "Task name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tasks in response body",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Create or update task",
        "description": "Update the configuration of a task or create a new task of the specified type. Creation of a new task requires the type to be specified. Properties left unspecified will be assigned the default value of the specified type upon creation of the task. Only specified properties will be updated, the task type cannot be updated once the task has been created. An empty string can be used for the schedule to change the task to run only when manually triggered.",
        "operationId": "putTask",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskname",
            "in": "path",
            "description": "Task name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Task configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Delete task",
        "description": "Permanently delete a task definition.",
        "operationId": "deleteTask",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskname",
            "in": "path",
            "description": "Task name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/tasks/{taskname}/status": {
      "get": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Check task execution status",
        "description": "Retrieve the current execution status of the task.",
        "operationId": "getTaskStateV2",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskname",
            "in": "path",
            "description": "Task name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Task execution status in response body",
            "schema": {
              "$ref": "#/definitions/Execution Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks and Monitors"
        ],
        "summary": "Run task",
        "description": "Set the status to RUNNING in order to trigger a task execution. Other status changes are not allowed with this call.",
        "operationId": "runTaskV2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System Profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskname",
            "in": "path",
            "description": "Task name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Execution status",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Execution Status"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: The request has succeeded"
          }
        }
      }
    },
    "/profiles/{profileid}/testruns": {
      "get": {
        "tags": [
          "Test Automation"
        ],
        "summary": "List test runs by System Profile",
        "description": "Get a list of registered test runs for given System Profile that have test executions. The level of detail can be controlled with the 'extend' query parameter.",
        "operationId": "getTestRuns",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time (ISO 8601) - default is 1st of January 1970 00:00",
            "required": false,
            "type": "string"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time (ISO 8601) - default is current time",
            "required": false,
            "type": "string"
          },
          {
            "name": "lastNTestruns",
            "in": "query",
            "description": "Max number of the most recent test runs to include",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lastNBuilds",
            "in": "query",
            "description": "Max number of the most recent builds (versionBuild) values to include",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "extend",
            "in": "query",
            "description": "Level of detail returned in the response:\n- 'runs': only meta data,\n- 'results': meta data and individual test results,\n- 'measures': meta data, test results and measure values",
            "required": false,
            "type": "string",
            "default": "runs",
            "enum": [
              "runs",
              "results",
              "measures"
            ]
          },
          {
            "name": "finished",
            "in": "query",
            "description": "Finished state",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "failed",
                "invalidated",
                "volatile",
                "degraded",
                "improved",
                "missing",
                "passed"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "versionMilestone",
            "in": "query",
            "description": "Filter by versionMilestone",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "versionMajor",
            "in": "query",
            "description": "Filter by versionMajor",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "versionMinor",
            "in": "query",
            "description": "Filter by versionMinor",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "versionRevision",
            "in": "query",
            "description": "Filter by versionRevision",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "versionBuild",
            "in": "query",
            "description": "Filter by versionBuild",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "category",
            "in": "query",
            "description": "Filter by category (unit, uidriven, performance, webapi)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "unit",
                "uidriven",
                "performance",
                "webapi"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "marker",
            "in": "query",
            "description": "Filter by marker",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "platform",
            "in": "query",
            "description": "Filter by platform",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Test runs for the given System Profile id found, list returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRuns"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Register test run",
        "description": "Register a test run with provided parameters. The reply contains all test run's details including the UUID.\n\n- **category** is limited to one of the following values: 'unit' (default), 'uidriven', 'performance', 'webapi' or 'external'.\n- **marker** is a label used in the Test Automation dashlet charts.\n- if the **platform** is left blank, the agent will detect it automatically.\n- if the **includedMetrics** is provided, only test results for these metrics will be collected in this test run. In order to collect all test results for a given metric group you can pass just the group name or leave the metric name blank.\n- **additionalMetaData** can be used to provide additional data stored in Test Run, like Jenkins build ID, list of commiters, etc. Example Value:\n\n```\n\"additionalMetaData\": [{\n \"key1\": \"value1\",\n \"key2\": \"value2\"\n}]\n```",
        "operationId": "postTestRun",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test run parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TestRun Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Test run registered for the given System Profile",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/testruns/search": {
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Search and filter test runs by System Profile",
        "description": "Returns a list of registered test runs for a given System Profile that have test executions. You can control the time range of included data with 'timeframestart', 'timeframeend', 'lastntestruns' and 'lastnbuilds' filter properties. The level of detail can be controlled with the 'extend' filter property.",
        "operationId": "searchTestRuns",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test run filter",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TestRun Filter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Test runs for the given System Profile id found, list returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRuns"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/testruns/{testrunid}": {
      "get": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Get test run by id",
        "description": "Get all test run details including test executions.",
        "operationId": "getTestrunById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "testrunid",
            "in": "path",
            "description": "UUID of the test run",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Test run with the given id found, details returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Post test result",
        "description": "Post a test result for a registered test run of category 'external'.",
        "operationId": "postExternalTestData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "testrunid",
            "in": "path",
            "description": "UUID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Test result",
            "required": true,
            "schema": {
              "$ref": "#/definitions/External Test"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/profiles/{profileid}/testruns/{testrunid}/finish": {
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Mark test run as finished",
        "description": "Returns all test run details (including test executions) of a finished test run.",
        "operationId": "finishTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "testrunid",
            "in": "path",
            "description": "UUID of the test run",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Test run with given id found, details returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/testruns/{testrunid}/invalidate": {
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Mark test run as invalidated",
        "description": "Sets the test run state to INVALIDATED either for all test executions within that test run, or only executions of tests that matches 'testId' (which can be package, or class or a single test).\nReturns all test run details (including test executions) of an invalidated test run.",
        "operationId": "invalidateTestRun",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "testrunid",
            "in": "path",
            "description": "UUID of the test run",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Test run with the given id found, details returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          }
        }
      }
    },
    "/profiles/{profileid}/testruns/{testrunid}/markAsFailed": {
      "post": {
        "tags": [
          "Test Automation"
        ],
        "summary": "Set test execution's state to FAILED",
        "description": "Test execution is located using testRunId (UUID) and full test name (including package and class).\nReturns all details of a test run which is bound with marked test execution.",
        "operationId": "markTestExecutionAsFailed",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "profileid",
            "in": "path",
            "description": "System profile id",
            "required": true,
            "type": "string"
          },
          {
            "name": "testrunid",
            "in": "path",
            "description": "UUID of the test run",
            "required": true,
            "type": "string"
          },
          {
            "name": "testId",
            "in": "query",
            "description": "Full test name including package description and class name (if applicable)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Test run with the given id found, details returned in the response body",
            "schema": {
              "$ref": "#/definitions/TestRun"
            }
          }
        }
      }
    },
    "/purelyticsstreamjob": {
      "post": {
        "tags": [
          "PureLytics Stream"
        ],
        "summary": "Create PureLytics Job",
        "description": "Post a request containing a JSON body to create a PureLytics job. The location header of the response contains a reference to the created job.",
        "operationId": "postAnalyticsJob",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "selection criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PureLytics Stream"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted: The request has succeeded and will continue in background. See Location header for progress information.",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "404": {
            "description": "Not Found: System Profile or stored session not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/purelyticsstreamjob/{jobid}": {
      "get": {
        "tags": [
          "PureLytics Stream"
        ],
        "summary": "Get information for PureLytics Stream job",
        "description": "Get the state of a PureLytics job with a UUID.",
        "operationId": "getAnalyticsJobInfo",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "jobid",
            "in": "path",
            "description": "UUID of the PureLytics Stream job",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Job progress information in response body",
            "schema": {
              "$ref": "#/definitions/PureLytics Stream Job"
            }
          }
        }
      }
    },
    "/server/license": {
      "get": {
        "tags": [
          "Server Management"
        ],
        "summary": "License information",
        "description": "Request license information.",
        "operationId": "getLicenseInformation",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "License information in response body",
            "schema": {
              "$ref": "#/definitions/License Information"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Server Management"
        ],
        "summary": "License import",
        "description": "Send a license file to the AppMon Server and trigger a license import.",
        "operationId": "importLicense",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "The AppMon license file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request: Problems with the uploaded file",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/server/license/volume": {
      "post": {
        "tags": [
          "Server Management"
        ],
        "summary": "License volume import",
        "description": "Send a volume license file to the AppMon Server and trigger a volume license import.",
        "operationId": "importVolumeLicense",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "file",
            "description": "The AppMon volume license file",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InputStream"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request: Problems with the uploaded file",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/server/restart": {
      "post": {
        "tags": [
          "Server Management"
        ],
        "summary": "Restart the AppMon Server",
        "description": "Restart the server. You must have permissions to shut down and restart the server.",
        "operationId": "restartServer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status of operation in response body",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/server/shutdown": {
      "post": {
        "tags": [
          "Server Management"
        ],
        "summary": "Shutdown the AppMon Server",
        "description": "Shutdown the server. You must have permissions to shut down and restart the server.",
        "operationId": "shutdownServer",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status of operation in response body",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/server/supportarchive": {
      "get": {
        "tags": [
          "Server Management"
        ],
        "summary": "Download Support Archive",
        "description": "REST interface to download and stream Support Archives (also called SysInfo Packages). The compressed bytes are streamed directly to the REST Client instead of creating a complete file on the server, providing a faster response.\n\nSupported File Types\n\nFile type | Description | Default included\n--- | --- | ---\nlogfiles | Log files | yes\nconfigfiles | Configuration files | yes\ndashboards | Dashboards | yes\nprofiles | System Profiles | yes\nagentrecords | Agent records | yes\nsessions | All stored sessions, including the self-monitoring session | no\ninteractionlogs | Interaction logs | yes\ndebugfiles | Debug files | yes\nprotocoldump | Protocol dumps | yes\nlicensefile | License (activation) file | yes\nsensorrecords | Sensor records | yes\ncomponentproperties | Component properties | yes\nserversession | The self-monitoring session | yes\nagentusagelogs | Agent usage log files | yes\n",
        "operationId": "getSupportArchive",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "timeout",
            "in": "query",
            "description": "Timeout, in seconds, for fetching large files",
            "required": false,
            "type": "string"
          },
          {
            "name": "include",
            "in": "query",
            "description": "Comma-separated list of file types to be included (see Implementation Notes for supported file types)",
            "required": false,
            "type": "string"
          },
          {
            "name": "exclude",
            "in": "query",
            "description": "Comma-separated list of file types to be excluded (see Implementation Notes for supported file types)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded"
          }
        }
      }
    },
    "/server/version": {
      "get": {
        "tags": [
          "Server Management"
        ],
        "summary": "Request the version of the AppMon Server",
        "description": "Get the version of the running server.",
        "operationId": "getVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Server version in response body",
            "schema": {
              "$ref": "#/definitions/Result"
            }
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "List stored sessions",
        "description": "Get a list of all stored sessions which are available to the current user.",
        "operationId": "listStoredSessions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of stored sessions in response body",
            "schema": {
              "$ref": "#/definitions/Sessions"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "Import stored session through form",
        "description": "Upload and import a session via a form. Alternatively, you can send the file as an octet-stream in the post body.",
        "operationId": "importStoredSession",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "filename",
            "in": "formData",
            "description": "The stored session file to upload",
            "required": true,
            "type": "file"
          },
          {
            "name": "labels",
            "in": "query",
            "description": "List of labels for the imported session",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "locked",
            "in": "query",
            "description": "true to activate deletion lock, false to deactivate it",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "Delete multiple stored sessions",
        "description": "Delete every stored session that matches a specified session type and is older than a specified number of minutes. Additionally the deletion request can be restricted to stored sessions of a specific System Profile.",
        "operationId": "deleteStoredSessions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Type of sessions which shall be deleted",
            "required": true,
            "type": "string",
            "enum": [
              "purepath",
              "memdump_simple",
              "memdump_extended",
              "memdump_selective",
              "threaddump",
              "sampling",
              "all"
            ]
          },
          {
            "name": "olderthanminutes",
            "in": "query",
            "description": "The minimum age in minutes a stored session must have to be deleted. The value 0 will delete stored sessions regardless of their age",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "query",
            "description": "If specified, the deletion will only affect stored sessions of this System Profile. Otherwise the System Profile will be irrelevant for deletion",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "See response body for the success of the individual deletion operations",
            "schema": {
              "$ref": "#/definitions/Deleted stored sessions"
            }
          }
        }
      }
    },
    "/sessions/{sessionid}": {
      "get": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "Export stored session",
        "description": "Export a stored session. For large stored sessions the size of the downloaded file can be huge. Make sure the download machine has enough free space to ensure that the download is successful.",
        "operationId": "getStoredSession",
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sessionid",
            "in": "path",
            "description": "Unique session id",
            "required": true,
            "type": "string"
          },
          {
            "name": "removeconfidentialstrings",
            "in": "query",
            "description": "true to remove confidential strings from the exported session, false to keep them included",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "timeframestart",
            "in": "query",
            "description": "Timeframe filter start time timestamp (ISO8601)",
            "required": false,
            "type": "string",
            "x-example": "2016-05-11T11:35:31.170+02:00"
          },
          {
            "name": "timeframeend",
            "in": "query",
            "description": "Timeframe filter end time timestamp (ISO8601)",
            "required": false,
            "type": "string",
            "x-example": "2016-05-11T11:35:31.170+02:00"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded"
          }
        }
      },
      "delete": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "Delete individual stored session",
        "description": "Delete a stored session.",
        "operationId": "deleteStoredSession",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionid",
            "in": "path",
            "description": "Unique session id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/sessions/{sessionid}/metadata": {
      "get": {
        "tags": [
          "Stored Sessions"
        ],
        "summary": "Get session metadata",
        "description": "Get comprehensive details of a stored session. For more information look at the response entity.",
        "operationId": "getStoredSessionMetaData",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sessionid",
            "in": "path",
            "description": "Unique session id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Stored session metadata in response body",
            "schema": {
              "$ref": "#/definitions/Session Metadata"
            }
          }
        }
      }
    },
    "/usermanagement/groups": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List user groups",
        "description": "Get a list of all configured user groups.",
        "operationId": "getGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of user groups in response body",
            "schema": {
              "$ref": "#/definitions/User Groups"
            }
          }
        }
      }
    },
    "/usermanagement/groups/{groupid}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user group",
        "description": "Get the JSON representation of a user group configuration.",
        "operationId": "getGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User group configuration in response body",
            "schema": {
              "$ref": "#/definitions/User Group"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Create or update user group",
        "description": "Update the configuration of a user group or create a new user group.",
        "operationId": "putGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User group configuration",
            "required": false,
            "schema": {
              "$ref": "#/definitions/User Group Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user group",
        "description": "Permanently delete a user group.",
        "operationId": "deleteGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/groups/{groupid}/dashboardmappings": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List dashboard permissions of user group",
        "description": "Get a list of all dashboard permissions of this user group.",
        "operationId": "getGroupDashboardMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of dashboard permissions in response body",
            "schema": {
              "$ref": "#/definitions/Dashboard Permission Mappings"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Add dashboard permission to user group",
        "description": "Add a dashboard permission configuration to this user group.",
        "operationId": "addGroupDashboardMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Dashboard permission configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Dashboard Permission Mapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Clear dashboard permissions of user group",
        "description": "Remove all dashboard permissions for this user group. If the query parameter 'dashboard' is specified, only permissions for the specified dashboard will be removed.",
        "operationId": "deleteGroupDashboardMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "dashboard",
            "in": "query",
            "description": "Dashboard name. If specified, the deletion will only affect mappings for this dashboard.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/groups/{groupid}/profilemappings": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List System Profile permissions of user group",
        "description": "Get a list of all System Profile permissions (System Profile to role mappings) of this user group.",
        "operationId": "getGroupSystemProfileMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of System Profile role mappings in response body",
            "schema": {
              "$ref": "#/definitions/System Profile Role Mappings"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Add System Profile permission to user group",
        "description": "Add a System Profile role mapping to this user group to grant users of this group permissions on the specified System Profile.",
        "operationId": "addGroupSystemProfileMapping",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "System Profile role mapping",
            "required": true,
            "schema": {
              "$ref": "#/definitions/System Profile Role Mapping Definition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Clear System Profile permissions of user group",
        "description": "Remove all System Profile role mappings for this user group. If the query parameter 'profile' is specified, only mappings for the specified System Profile will be removed.",
        "operationId": "deleteGroupSystemProfileMappings",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "groupid",
            "in": "path",
            "description": "User group id",
            "required": true,
            "type": "string"
          },
          {
            "name": "profile",
            "in": "query",
            "description": "System Profile id. If specified, the deletion will only affect mappings for this System Profile.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/ldap": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get LDAP configuration",
        "description": "Get the JSON representation of the current LDAP configuration.",
        "operationId": "getLdapConfigV3",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "LDAP configuration representation in response body",
            "schema": {
              "$ref": "#/definitions/LDAP configuration"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Replace LDAP configuration",
        "description": "Replace the current LDAP configuration with the new configuration provided. LDAP authentication will be activated automatically after this REST call has been successful. When using an SSL connection and the certificate from the LDAP server is unknown, the configuration will not be stored. To avoid this, you can provide the MD5 fingerprint of the LDAP server's certificate you trust.",
        "operationId": "putLdapConfig",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LDAP config",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAP configuration"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/ldap/certificate": {
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Update LDAP server certificate",
        "description": "Remove the currently trusted certificate of the LDAP server and trust the new certificate if its MD5 fingerprint matches the given hexadecimal representation.",
        "operationId": "updateTrustCertificate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Certificate fingerprint",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LDAP certificate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/ldap/status": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Activation status of LDAP configuration",
        "description": "Check if LDAP authentication is enabled.",
        "operationId": "getLdapConfigActivationStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Activation status of LDAP configuration in response body",
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Activate/Deactivate LDAP",
        "description": "Change the activation state of the current LDAP configuration. Activation of LDAP authentication is not possible when using an SSL connection and the certificate from the LDAP server is unknown.",
        "operationId": "putLdapConfigActivationStatus",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Activation state",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Activation Status"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/permissions": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List permissions",
        "description": "Get a list of all available permissions.",
        "operationId": "getPermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of permissions in response body",
            "schema": {
              "$ref": "#/definitions/Permissions"
            }
          }
        }
      }
    },
    "/usermanagement/permissions/{permissionid}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get permission",
        "description": "Get the JSON representation of a permission.",
        "operationId": "getPermission",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "permissionid",
            "in": "path",
            "description": "Permission id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Permission description in response body",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        }
      }
    },
    "/usermanagement/roles": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List roles",
        "description": "Get a list of all configured roles.",
        "operationId": "getRoles",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of roles in response body",
            "schema": {
              "$ref": "#/definitions/Roles"
            }
          }
        }
      }
    },
    "/usermanagement/roles/{roleid}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get role",
        "description": "Get the JSON representation of a role configuration.",
        "operationId": "getRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Role configuration in response body",
            "schema": {
              "$ref": "#/definitions/Role"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Create or update role",
        "description": "Update the configuration of a role or create a new role.",
        "operationId": "putRole",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Role definition",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Role Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete role",
        "description": "Permanently delete a role.",
        "operationId": "deleteRole",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/roles/{roleid}/permissions": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List role permissions",
        "description": "Get a list of all permissions assigned to this role.",
        "operationId": "getRolePermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of permissions in response body",
            "schema": {
              "$ref": "#/definitions/Permissions"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Add permissions to role",
        "description": "Assign additional permissions to the given role. All previously assigned permissions will remain valid. Assigning a permission not granted to the requesting user will lead to an error.",
        "operationId": "addRolePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Permission list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role Permissions Mapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Replace permissions of role",
        "description": "Assign permissions to the given role. All previously assigned permissions will be removed for this role. If in result of this update any permission not granted to the requesting user would be additionally assigned to the role or removed from the role, the request will fail with an error.",
        "operationId": "putRolePermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Permission list",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Role Permissions Mapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Clear permissions of role",
        "description": "Attempt to remove all permissions for this role. Permissions not granted to the user executing this request cannot be removed and will remain assigned to this role even if the request completes without an error.",
        "operationId": "deleteRolePermissions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "roleid",
            "in": "path",
            "description": "Role id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/users": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List users",
        "description": "Get a list of all configured users.",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of users in response body",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        }
      }
    },
    "/usermanagement/users/{userid}": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "Get user",
        "description": "Get the JSON representation of a user configuration.",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User configuration in response body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Create or update user",
        "description": "Update the configuration of a user or create a new user.",
        "operationId": "putUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User Definition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created: The request was fulfilled and resulted in a new resource being created (see Location header)",
            "headers": {
              "Location": {
                "type": "string",
                "description": ""
              }
            }
          },
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Delete user",
        "description": "Permanently delete a user.",
        "operationId": "deleteUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/users/{userid}/changepassword": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Update user password",
        "description": "Update the password of a user. You can only change your own password, i.e. the user ID must be identical to the user authorizing this call. Externally managed users (e.g. via LDAP) cannot change their password with this endpoint.",
        "operationId": "changeUserPassword",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Password changeset",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Password Changeset"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    },
    "/usermanagement/users/{userid}/groups": {
      "get": {
        "tags": [
          "User Management"
        ],
        "summary": "List groups of user",
        "description": "Get a list of all groups the user is member of.",
        "operationId": "getUserGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of groups in response body",
            "schema": {
              "$ref": "#/definitions/User Groups"
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Add user to groups",
        "description": "Add the user to the given groups. All previous group memberships will remain valid. LDAP groups are assigned automatically and can therefore not be added manually.",
        "operationId": "addUserGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User groups",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User Groups Mapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "put": {
        "tags": [
          "User Management"
        ],
        "summary": "Replace group memberships of user",
        "description": "Assign the user to the given groups. All previous non-LDAP group memberships will be cleared. LDAP groups are assigned automatically and can therefore not be added/removed.",
        "operationId": "putUserGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "User groups",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User Groups Mapping"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The update request has succeeded but does not have an entity-body in the response"
          }
        }
      },
      "delete": {
        "tags": [
          "User Management"
        ],
        "summary": "Clear group memberships of user",
        "description": "Remove the user from all non-LDAP groups the user is currently a member of. LDAP groups are assigned automatically and can therefore not be removed.",
        "operationId": "deleteUserGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "Account name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: The request has succeeded but does not have an entity-body in the response"
          }
        }
      }
    }
  },
  "definitions": {
    "Test Measure": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "metricGroup": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "unit": {
          "type": "string",
          "readOnly": true
        },
        "expectedMin": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "expectedMax": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "numFailingOrInvalidatedRuns": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numValidRuns": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numImprovedRuns": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numDegradedRuns": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "violationPercentage": {
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "Violation": {
      "type": "object",
      "properties": {
        "measure": {
          "description": "Violated measure",
          "readOnly": true,
          "$ref": "#/definitions/Measure"
        },
        "threshold": {
          "description": "Violated threshold of the measure",
          "readOnly": true,
          "$ref": "#/definitions/Threshold"
        },
        "unit": {
          "type": "string",
          "description": "Unit of measurements and threshold",
          "readOnly": true,
          "enum": [
            "none",
            "nanoseconds",
            "milliseconds",
            "seconds",
            "minutes",
            "hours",
            "number",
            "bytes",
            "kilobytes",
            "megabytes",
            "gigabytes",
            "occurrences",
            "percent",
            "count",
            "auto"
          ]
        },
        "measurements": {
          "type": "array",
          "description": "Measurements contributing to the violation",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Measurement"
          }
        }
      },
      "description": "Measure threshold violation contributing to an alert"
    },
    "Session Storing Options": {
      "type": "object",
      "properties": {
        "sessionname": {
          "type": "string",
          "description": "User-readable presentable name for the session to be stored",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description for the session to be stored",
          "readOnly": true
        },
        "appendtimestamp": {
          "type": "boolean",
          "example": false,
          "description": "true to append timestamp information to recorded session name, otherwise false (default is false)",
          "readOnly": true,
          "default": false
        },
        "recordingoption": {
          "type": "string",
          "description": "Recording option, possible values: 'all', 'violations', 'timeseries'",
          "readOnly": true,
          "enum": [
            "all",
            "violations",
            "timeseries"
          ]
        },
        "locksession": {
          "type": "boolean",
          "example": false,
          "description": "true to lock session, otherwise false (default is false)",
          "readOnly": true,
          "default": false
        },
        "labels": {
          "type": "array",
          "description": "Descriptive text to mark the stored session",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "timeframestart": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time of the interval during which the data will be stored, in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "timeframeend": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time of the interval during which the data will be stored, in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        }
      }
    },
    "Alert Suppression": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:00.000+02:00",
          "description": "ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX, seconds and milliseconds will be ignored",
          "readOnly": true
        },
        "endby": {
          "type": "string",
          "example": "2016-05-11T11:35:00.000+02:00",
          "description": "End of the scheduling period, will be ignored for non-repeating downtimes. ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX, seconds and milliseconds will be ignored.",
          "readOnly": true
        },
        "duration": {
          "readOnly": true,
          "$ref": "#/definitions/Duration"
        },
        "cron": {
          "type": "string",
          "description": "Scheduling expression for Quartz cron trigger",
          "readOnly": true
        },
        "once": {
          "type": "boolean",
          "description": "True if the Alert Suppression is only scheduled once. If true, the cron expression will be ignored. If false, a cron expression has to be provided.",
          "readOnly": true,
          "default": false
        },
        "systemprofiles": {
          "type": "array",
          "description": "System Profiles and Incident rules the Alert Suppression relates to",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Alert Suppression Profile Config"
          }
        },
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "description": "Human readable version of the cron expression.",
          "readOnly": true
        }
      },
      "description": "Alert Suppression record description"
    },
    "TestRunMDRestDTO": {
      "type": "object"
    },
    "Users": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "description": "List of user references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Agent Group": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Agent Group",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of the Agent Group",
          "readOnly": true
        }
      }
    },
    "Exclusion Calendar": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "string",
          "example": "2016-05-11T11:35:31.000+02:00",
          "description": "Begin of the exclusion period, in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-09-23T23:00:00.000+02:00",
          "description": "End of the exclusion period, in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "timespan": {
          "description": "Timespan to exclude",
          "readOnly": true,
          "$ref": "#/definitions/Daily Calendar"
        },
        "weekdays": {
          "type": "array",
          "description": "Weekdays to exclude (allowed values: MON,TUE,WED,THU,FRI,SAT,SUN)",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "MON",
              "TUE",
              "WED",
              "THU",
              "FRI",
              "SAT",
              "SUN",
              "INVALID"
            ]
          }
        },
        "months": {
          "type": "array",
          "description": "Months to exclude (allowed values: JAN,FEB,MAR,APR,MAY,JUN,JUL,AUG,SEP,OCT,NOV,DEC)",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "JAN",
              "FEB",
              "MAR",
              "APR",
              "MAY",
              "JUN",
              "JUL",
              "AUG",
              "SEP",
              "OCT",
              "NOV",
              "DEC",
              "INVALID"
            ]
          }
        }
      }
    },
    "TestRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "example": "unit",
          "readOnly": true,
          "enum": [
            "unit",
            "uidriven",
            "performance",
            "webapi",
            "external"
          ]
        },
        "versionBuild": {
          "type": "string",
          "readOnly": true
        },
        "versionMajor": {
          "type": "string",
          "readOnly": true
        },
        "versionMilestone": {
          "type": "string",
          "readOnly": true
        },
        "versionMinor": {
          "type": "string",
          "readOnly": true
        },
        "versionRevision": {
          "type": "string",
          "readOnly": true
        },
        "platform": {
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Test run start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "sessionId": {
          "type": "string",
          "readOnly": true
        },
        "session": {
          "type": "string",
          "readOnly": true
        },
        "systemProfile": {
          "type": "string",
          "readOnly": true
        },
        "marker": {
          "type": "string",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        },
        "creationMode": {
          "type": "string",
          "example": "MANUAL",
          "readOnly": true,
          "enum": [
            "MANUAL",
            "AUTO"
          ]
        },
        "additionalMetaData": {
          "readOnly": true,
          "$ref": "#/definitions/TestRunMDRestDTO"
        },
        "numDegraded": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numFailed": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numImproved": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numInvalidated": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numPassed": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "numVolatile": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "finished": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "includedMetrics": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TestRun Metric Filter"
          }
        },
        "testResults": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Test Result"
          }
        }
      }
    },
    "Measure": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Measure name",
          "readOnly": true
        },
        "metric": {
          "type": "string",
          "description": "Metric name",
          "readOnly": true
        },
        "metricgroup": {
          "type": "string",
          "description": "Metric Group name",
          "readOnly": true
        },
        "application": {
          "type": "string",
          "description": "Application name",
          "readOnly": true
        },
        "source": {
          "description": "Configured source",
          "readOnly": true,
          "$ref": "#/definitions/Source"
        }
      },
      "description": "Measure description"
    },
    "Permission": {
      "type": "object",
      "required": [
        "id",
        "risk"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Permission id",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of the permission",
          "readOnly": true
        },
        "risk": {
          "type": "string",
          "description": "Impact of granting the permission",
          "readOnly": true,
          "enum": [
            "low",
            "medium",
            "high"
          ]
        }
      }
    },
    "External Test": {
      "type": "object",
      "required": [
        "measures",
        "testName"
      ],
      "properties": {
        "testName": {
          "type": "string",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Timestamp in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "measures": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/External Test Measure"
          }
        }
      }
    },
    "DSS Response": {
      "type": "object",
      "properties": {
        "dss-op": {
          "type": "string",
          "description": "The kind of operation the response relates to",
          "readOnly": true
        },
        "dss-op-status": {
          "type": "string",
          "description": "Status message of the response",
          "readOnly": true
        }
      }
    },
    "Threshold": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "LowerSevere",
            "LowerWarning",
            "UpperWarning",
            "UpperSevere"
          ]
        },
        "value": {
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      }
    },
    "Status": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Operation status",
          "readOnly": true,
          "enum": [
            "success",
            "fail"
          ]
        }
      },
      "description": "Operation status"
    },
    "Business Hours List": {
      "type": "object",
      "properties": {
        "businesshours": {
          "type": "array",
          "description": "List of business hours references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "System Profile Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "System Profile id",
          "readOnly": true
        },
        "isrecording": {
          "type": "boolean",
          "description": "Session recording state",
          "readOnly": true,
          "default": false
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        }
      }
    },
    "PureLytics Stream Target": {
      "type": "object",
      "properties": {
        "elasticsearch": {
          "description": "Specification of the elasticsearch target (mutually exclusive with other targets)",
          "readOnly": true,
          "$ref": "#/definitions/Elasticsearch"
        },
        "generichttp": {
          "description": "Specification of the generic http target (mutually exclusive with other targets)",
          "readOnly": true,
          "$ref": "#/definitions/Generic HTTP"
        }
      }
    },
    "DSS Delete Response": {
      "type": "object",
      "properties": {
        "dss-op": {
          "type": "string",
          "description": "The kind of operation the response relates to",
          "readOnly": true
        },
        "dss-op-status": {
          "type": "string",
          "description": "Status message of the response",
          "readOnly": true
        },
        "files-deleted": {
          "type": "integer",
          "format": "int32",
          "description": "Nr of files deleted",
          "readOnly": true
        }
      },
      "description": "Response for delete operations"
    },
    "Sessions": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "description": "List of sessions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SessionData"
          }
        }
      },
      "description": "List of available sessions"
    },
    "Inclusion Calendar": {
      "type": "object",
      "properties": {
        "timespan": {
          "description": "Timespan of valid business hours on the included weekdays",
          "readOnly": true,
          "$ref": "#/definitions/Daily Calendar"
        },
        "weekdays": {
          "type": "array",
          "description": "Weekdays the specified business hours are valid on (allowed values: MON,TUE,WED,THU,FRI,SAT,SUN)",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "MON",
              "TUE",
              "WED",
              "THU",
              "FRI",
              "SAT",
              "SUN",
              "INVALID"
            ]
          }
        }
      }
    },
    "Roles": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "description": "List of role references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Recording Status": {
      "type": "object",
      "required": [
        "recording"
      ],
      "properties": {
        "recording": {
          "type": "boolean",
          "description": "Status of recording, true if recording is ongoing",
          "readOnly": true,
          "default": false
        }
      }
    },
    "DSS List Response": {
      "type": "object",
      "properties": {
        "dss-op": {
          "type": "string",
          "description": "The kind of operation the response relates to",
          "readOnly": true
        },
        "dss-op-status": {
          "type": "string",
          "description": "Status message of the response",
          "readOnly": true
        },
        "symbolfiles": {
          "type": "array",
          "description": "List of file descriptors",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/DSS Symbol File"
          }
        }
      },
      "description": "Response for list operations"
    },
    "License Reservation Interval": {
      "type": "object",
      "properties": {
        "intervalenabled": {
          "type": "boolean",
          "description": "Interval enabled",
          "readOnly": true,
          "default": false
        },
        "interval": {
          "type": "integer",
          "format": "int32",
          "description": "Interval",
          "readOnly": true
        },
        "intervallimit": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Interval limit",
          "readOnly": true
        },
        "intervalunit": {
          "type": "string",
          "description": "Interval unit",
          "readOnly": true,
          "enum": [
            "NO_INTERVAL",
            "MONTHS",
            "DAYS"
          ]
        },
        "intervalrefdate": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Interval reference date in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        }
      }
    },
    "Alert Suppression Definition": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:00.000+02:00",
          "description": "ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX, seconds and milliseconds will be ignored",
          "readOnly": true
        },
        "endby": {
          "type": "string",
          "example": "2016-05-11T11:35:00.000+02:00",
          "description": "End of the scheduling period, will be ignored for non-repeating downtimes. ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX, seconds and milliseconds will be ignored.",
          "readOnly": true
        },
        "duration": {
          "readOnly": true,
          "$ref": "#/definitions/Duration"
        },
        "cron": {
          "type": "string",
          "description": "Scheduling expression for Quartz cron trigger",
          "readOnly": true
        },
        "once": {
          "type": "boolean",
          "description": "True if the Alert Suppression is only scheduled once. If true, the cron expression will be ignored. If false, a cron expression has to be provided.",
          "readOnly": true,
          "default": false
        },
        "systemprofiles": {
          "type": "array",
          "description": "System Profiles and Incident rules the Alert Suppression relates to",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Alert Suppression Profile Config"
          }
        },
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        }
      },
      "description": "Alert Suppression record definition"
    },
    "Alert Response": {
      "type": "object",
      "required": [
        "message",
        "rule",
        "systemprofile"
      ],
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the alert",
          "readOnly": true,
          "enum": [
            "informational",
            "warning",
            "severe"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state of the alert",
          "readOnly": true,
          "enum": [
            "Created",
            "InProgress",
            "Confirmed"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "rule": {
          "type": "string",
          "description": "Incident Rule name",
          "readOnly": true
        },
        "systemprofile": {
          "type": "string",
          "description": "System Profile name",
          "readOnly": true
        },
        "violations": {
          "type": "array",
          "description": "Violated measure thresholds of the alert",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Violation"
          }
        }
      },
      "description": "Alert record description"
    },
    "Test Result": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "exectime": {
          "type": "string",
          "example": "2016-07-18T16:44:00.055+02:00",
          "description": "Start time of the test in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "package": {
          "type": "string",
          "readOnly": true
        },
        "platform": {
          "type": "string",
          "readOnly": true
        },
        "measures": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Test Measure"
          }
        }
      }
    },
    "Task or Monitor Reference": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the task/monitor",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Task/Monitor type",
          "readOnly": true
        }
      }
    },
    "Agent Group Template": {
      "type": "object",
      "required": [
        "agentgroup",
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "System Profile template name",
          "readOnly": true
        },
        "agentgroup": {
          "type": "string",
          "description": "Name of the Agent Group to be copied from the template",
          "readOnly": true
        }
      }
    },
    "Monitors": {
      "type": "object",
      "properties": {
        "monitors": {
          "type": "array",
          "description": "List of available monitors",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Task or Monitor Reference"
          }
        }
      }
    },
    "Session Metadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the session",
          "readOnly": true
        },
        "storedsessiontype": {
          "type": "string",
          "description": "Stored session type",
          "readOnly": true,
          "enum": [
            "purepath",
            "memdump_simple",
            "memdump_extended",
            "memdump_selective",
            "threaddump",
            "sampling"
          ]
        },
        "sessiontype": {
          "type": "string",
          "description": "Session type",
          "readOnly": true,
          "enum": [
            "live",
            "server",
            "stored",
            "untyped"
          ]
        },
        "systemprofile": {
          "type": "string",
          "description": "Name of the system profile the session belongs to",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Session name",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Size in bytes",
          "readOnly": true
        },
        "deletionlocked": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "directorypath": {
          "type": "string",
          "readOnly": true
        },
        "state": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "inprogress",
            "finished",
            "corrupt",
            "incomplete"
          ]
        },
        "capturingstart": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "The start time of the session capturing in ISO8601 format",
          "readOnly": true
        },
        "capturingduration": {
          "type": "integer",
          "format": "int64",
          "description": "Capturing duration in milliseconds",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "readOnly": true
        },
        "labels": {
          "type": "array",
          "readOnly": true,
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "recordingtype": {
          "type": "string",
          "readOnly": true
        },
        "agent": {
          "type": "string",
          "readOnly": true
        },
        "numberofpurepaths": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "continuoussession": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        }
      },
      "description": "Comprehensive metadata of a session"
    },
    "Business Hours": {
      "type": "object",
      "properties": {
        "inclusions": {
          "type": "array",
          "description": "List of timespans that define valid business hours",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Inclusion Calendar"
          }
        },
        "exclusions": {
          "type": "array",
          "description": "List of exceptions from the general business hours",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Exclusion Calendar"
          }
        }
      }
    },
    "License Reservation Agent Units": {
      "type": "object",
      "properties": {
        "reserved": {
          "type": "number",
          "description": "Reserved Agent Units",
          "readOnly": true
        },
        "maximumallowed": {
          "type": "number",
          "example": 1.0,
          "description": "Maximum allowed Agent Units",
          "readOnly": true
        }
      }
    },
    "User Groups Mapping": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "description": "List of user group ids",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResponseReferenceBase": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the reference",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        }
      }
    },
    "SessionData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id of the session",
          "readOnly": true
        },
        "storedsessiontype": {
          "type": "string",
          "description": "Stored session type",
          "readOnly": true,
          "enum": [
            "purepath",
            "memdump_simple",
            "memdump_extended",
            "memdump_selective",
            "threaddump",
            "sampling"
          ]
        },
        "sessiontype": {
          "type": "string",
          "description": "Session type",
          "readOnly": true,
          "enum": [
            "live",
            "server",
            "stored",
            "untyped"
          ]
        },
        "systemprofile": {
          "type": "string",
          "description": "Name of the system profile the session belongs to",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        }
      }
    },
    "System Profile Configuration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the reference",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        },
        "isactive": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        }
      }
    },
    "User Groups": {
      "type": "object",
      "required": [
        "groups"
      ],
      "properties": {
        "groups": {
          "type": "array",
          "description": "List of user group references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Host Expressions": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "description": "List of configured host expressions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Host Expression"
          }
        }
      }
    },
    "Alert Suppression Profile Config": {
      "type": "object",
      "properties": {
        "systemprofile": {
          "type": "string",
          "description": "System Profile name",
          "readOnly": true
        },
        "incidentrules": {
          "type": "array",
          "description": "Incident Rule names",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Lists selected Incident rules for a System Profile"
    },
    "TestRuns": {
      "type": "object",
      "properties": {
        "testRuns": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TestRun"
          }
        },
        "message": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Agent Group Definition": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the Agent Group",
          "readOnly": true
        },
        "sourcetemplate": {
          "description": "Source template reference",
          "readOnly": true,
          "$ref": "#/definitions/Agent Group Template"
        }
      }
    },
    "License Reservation Agent Hours": {
      "type": "object",
      "properties": {
        "reserved": {
          "type": "integer",
          "format": "int64",
          "description": "reserved Agent Hours",
          "readOnly": true
        },
        "useunreservedagenthours": {
          "type": "boolean",
          "example": true,
          "description": "Use unreserved Agent Hours",
          "readOnly": true,
          "default": false
        },
        "interval": {
          "description": "Agent Hours interval",
          "readOnly": true,
          "$ref": "#/definitions/License Reservation Interval"
        }
      }
    },
    "Dashboard Permission Mapping": {
      "type": "object",
      "required": [
        "dashboard"
      ],
      "properties": {
        "dashboard": {
          "type": "string",
          "description": "Name of the dashboard to grant permissions for, or '*' (matches all dashboards)",
          "readOnly": true
        },
        "writepermission": {
          "type": "boolean",
          "description": "true if write permissions should be granted in addition to read permissions",
          "readOnly": true,
          "default": false
        },
        "autoopen": {
          "type": "boolean",
          "description": "true if dashboard should be opened automatically (cannot be set for default dashboard '*')",
          "readOnly": true,
          "default": false
        }
      }
    },
    "TestRun Definition": {
      "type": "object",
      "properties": {
        "versionBuild": {
          "type": "string",
          "readOnly": true
        },
        "versionMajor": {
          "type": "string",
          "readOnly": true
        },
        "versionMilestone": {
          "type": "string",
          "readOnly": true
        },
        "versionMinor": {
          "type": "string",
          "readOnly": true
        },
        "versionRevision": {
          "type": "string",
          "readOnly": true
        },
        "marker": {
          "type": "string",
          "readOnly": true
        },
        "platform": {
          "type": "string",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "example": "unit",
          "readOnly": true,
          "enum": [
            "unit",
            "uidriven",
            "performance",
            "webapi",
            "external"
          ]
        },
        "includedMetrics": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/TestRun Metric Filter"
          }
        },
        "additionalMetaData": {
          "description": "Additional meta data can be provided as a JSON object with arbitrary properties",
          "readOnly": true,
          "$ref": "#/definitions/TestRunMDRestDTO"
        }
      }
    },
    "TestRun Metric Filter": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "readOnly": true
        },
        "metric": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Alert Update": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the alert",
          "readOnly": true,
          "enum": [
            "informational",
            "warning",
            "severe"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state of the alert",
          "readOnly": true,
          "enum": [
            "Created",
            "InProgress",
            "Confirmed"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        }
      },
      "description": "Alert update description"
    },
    "Agent Mapping Definition": {
      "type": "object",
      "required": [
        "agentnamepattern"
      ],
      "properties": {
        "agentnamepattern": {
          "type": "string",
          "description": "Case-insensitive pattern for the name of the Agent",
          "readOnly": true
        },
        "agentnamematchtype": {
          "type": "string",
          "example": "starts",
          "description": "Matching type of the Agent name pattern",
          "readOnly": true,
          "enum": [
            "starts",
            "ends",
            "contains",
            "equals",
            "regex"
          ]
        },
        "hostnamepattern": {
          "type": "string",
          "description": "Case-insensitive pattern for the host name of the Agent",
          "readOnly": true
        },
        "hostnamematchtype": {
          "type": "string",
          "example": "starts",
          "description": "Matching type of the host name pattern",
          "readOnly": true,
          "enum": [
            "starts",
            "ends",
            "contains",
            "equals",
            "regex"
          ]
        }
      }
    },
    "Alert Reference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the reference",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        },
        "rule": {
          "type": "string",
          "description": "Incident Rule name",
          "readOnly": true
        }
      }
    },
    "Session Recording Options": {
      "type": "object",
      "properties": {
        "sessionname": {
          "type": "string",
          "description": "User-readable presentable name for the session to be stored",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description for the session to be stored",
          "readOnly": true
        },
        "appendtimestamp": {
          "type": "boolean",
          "example": false,
          "description": "true to append timestamp information to recorded session name, otherwise false (default is false)",
          "readOnly": true,
          "default": false
        },
        "recordingoption": {
          "type": "string",
          "description": "Recording option, possible values: 'all', 'violations', 'timeseries'",
          "readOnly": true,
          "enum": [
            "all",
            "violations",
            "timeseries"
          ]
        },
        "locksession": {
          "type": "boolean",
          "example": false,
          "description": "true to lock session, otherwise false (default is false)",
          "readOnly": true,
          "default": false
        },
        "labels": {
          "type": "array",
          "description": "Descriptive text to mark the stored session",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Agent Groups": {
      "type": "object",
      "properties": {
        "agentgroups": {
          "type": "array",
          "description": "List of Agent Group references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Agent License Information": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Agent technology type",
          "readOnly": true
        },
        "maxconnections": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum allowed connections",
          "readOnly": true
        }
      },
      "description": "Information about allowed number of connections for agent type"
    },
    "DSS Upload Response": {
      "type": "object",
      "properties": {
        "dss-op": {
          "type": "string",
          "description": "The kind of operation the response relates to",
          "readOnly": true
        },
        "dss-op-status": {
          "type": "string",
          "description": "Status message of the response",
          "readOnly": true
        },
        "bytes-uploaded": {
          "type": "integer",
          "format": "int64",
          "description": "Size uploaded in Bytes",
          "readOnly": true
        }
      },
      "description": "Response for upload operations"
    },
    "Task": {
      "type": "object",
      "properties": {
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "example": "Every 10 Seconds",
          "description": "Name of defined schedule",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "executiontarget": {
          "type": "string",
          "example": "Dynatrace Collector@myhost",
          "description": "Execution target (Server or Collector name)",
          "readOnly": true
        },
        "ispaused": {
          "type": "boolean",
          "description": "true if scheduling of task is suspended",
          "readOnly": true,
          "default": false
        },
        "type": {
          "type": "string",
          "example": "Memory Snapshot",
          "description": "Task type, required for creation, ignored for update",
          "readOnly": true
        },
        "parameters": {
          "type": "object",
          "description": "Task configuration parameters",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TestRunDTO": {
      "type": "object",
      "properties": {
        "versionMinor": {
          "type": "string",
          "readOnly": true
        },
        "versionMajor": {
          "type": "string",
          "readOnly": true
        },
        "versionBuild": {
          "type": "string",
          "readOnly": true
        },
        "platform": {
          "type": "string",
          "readOnly": true
        },
        "additionalMetaData": {
          "description": "Additional meta data can be provided as a JSON object with arbitrary properties",
          "readOnly": true,
          "$ref": "#/definitions/TestRunMDRestDTO"
        },
        "versionRevision": {
          "type": "string",
          "readOnly": true
        },
        "versionMilestone": {
          "type": "string",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "example": "unit",
          "readOnly": true,
          "enum": [
            "unit",
            "uidriven",
            "performance",
            "webapi",
            "external"
          ]
        },
        "marker": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Monitor Definition": {
      "type": "object",
      "properties": {
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "example": "Every 10 Seconds",
          "description": "Name of defined schedule",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "executiontarget": {
          "type": "string",
          "example": "Dynatrace Collector@myhost",
          "description": "Execution target (Server or Collector name)",
          "readOnly": true
        },
        "taskparameters": {
          "type": "object",
          "description": "Configuration parameters",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "example": "Unix System Monitor",
          "description": "Monitor type, required for creation, ignored for update",
          "readOnly": true
        }
      }
    },
    "System Profile Role Mapping": {
      "type": "object",
      "required": [
        "role",
        "systemprofile"
      ],
      "properties": {
        "systemprofile": {
          "type": "string",
          "description": "System Profile to grant permissions for, can be either an existing System Profile id, or '*' (matches all System Profiles), or '<user id>' (matches the personal System Profile of the respective user)",
          "readOnly": true
        },
        "role": {
          "description": "The role whose permissions are granted for the specified System Profile",
          "readOnly": true,
          "$ref": "#/definitions/ResponseReferenceBase"
        }
      }
    },
    "Host Expression": {
      "type": "object",
      "required": [
        "hostintersection"
      ],
      "properties": {
        "hostintersection": {
          "type": "array",
          "description": "Sub-expressions of the host intersection",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Host"
          }
        }
      }
    },
    "Deleted stored sessions": {
      "type": "object",
      "properties": {
        "totaldeletedbytes": {
          "type": "integer",
          "format": "int64",
          "description": "Size of deleted sessions in bytes",
          "readOnly": true
        },
        "successfullydeleted": {
          "type": "array",
          "description": "Information about successfully deleted sessions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/DeleteDumpSessionIdentifier"
          }
        },
        "failedtodelete": {
          "type": "array",
          "description": "Information about sessions failed to be deleted",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SessionData"
          }
        }
      },
      "description": "Lists successfully deleted sessions and sessions failed to be deleted"
    },
    "Result": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "type": "string",
          "description": "Result value",
          "readOnly": true
        }
      },
      "description": "Single string result"
    },
    "Template": {
      "type": "object",
      "required": [
        "template"
      ],
      "properties": {
        "template": {
          "type": "string",
          "description": "System Profile template name",
          "readOnly": true
        }
      },
      "description": "System Profile template reference"
    },
    "Environments Reference": {
      "type": "object",
      "required": [
        "apitoken",
        "dataexportenabled",
        "purepathdrilldownenabled",
        "securitygatewayurl",
        "securitygatewayused",
        "url",
        "webuiurl"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Environment id",
          "readOnly": true
        },
        "dataexportenabled": {
          "type": "boolean",
          "description": "dataExportEnabled",
          "readOnly": true,
          "default": false
        },
        "purepathdrilldownenabled": {
          "type": "boolean",
          "description": "purePathDrillDownEnabled",
          "readOnly": true,
          "default": false
        },
        "securitygatewayused": {
          "type": "boolean",
          "description": "securityGatewayUsed",
          "readOnly": true,
          "default": false
        },
        "url": {
          "type": "string",
          "description": "url",
          "readOnly": true
        },
        "apitoken": {
          "type": "string",
          "description": "apiToken",
          "readOnly": true
        },
        "webuiurl": {
          "type": "string",
          "description": "webUIBaseUrl",
          "readOnly": true
        },
        "securitygatewayurl": {
          "type": "string",
          "description": "securityGatewayUrl",
          "readOnly": true
        },
        "href": {
          "type": "string",
          "description": "Base URL of the REST resource. Further information can be retrieved from this URL or its subresources",
          "readOnly": true
        }
      }
    },
    "PureLytics Stream Job": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The job UUID",
          "readOnly": true
        },
        "session": {
          "type": "string",
          "description": "The name of the stored session or system profile the job runs on",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "description": "The current status of the job",
          "readOnly": true,
          "enum": [
            "unknown",
            "refused",
            "queued",
            "scheduled",
            "running",
            "finished",
            "failed",
            "configured",
            "waiting for executor"
          ]
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "The start time of the job in ISO8601 format",
          "readOnly": true
        },
        "duration": {
          "type": "integer",
          "format": "int64",
          "description": "The job duration in milliseconds up to now",
          "readOnly": true
        },
        "progress": {
          "type": "integer",
          "format": "int32",
          "description": "The progress of the job in percent up to now",
          "readOnly": true
        }
      }
    },
    "Execution Status": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status of execution",
          "readOnly": true,
          "enum": [
            "RUNNING",
            "FINISHED",
            "UNKNOWN"
          ]
        }
      }
    },
    "Permissions": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "description": "List of permission references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "License Reservation": {
      "type": "object",
      "required": [
        "systemprofile"
      ],
      "properties": {
        "systemprofile": {
          "type": "string",
          "description": "System Profile",
          "readOnly": true
        },
        "agentgroup": {
          "type": "string",
          "description": "Agent Group",
          "readOnly": true
        },
        "technologies": {
          "type": "array",
          "description": "Technology counts",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/License Reservation Technology"
          }
        },
        "agentunits": {
          "type": "number",
          "description": "Agent Units",
          "readOnly": true
        },
        "agentunitslimit": {
          "type": "number",
          "example": 1.0,
          "description": "Maximum allowed Agent Units",
          "readOnly": true
        },
        "agenthours": {
          "type": "integer",
          "format": "int64",
          "description": "Agent Hours",
          "readOnly": true
        },
        "useunreservedagenthours": {
          "type": "boolean",
          "example": true,
          "description": "Use unreserved Agent Hours",
          "readOnly": true,
          "default": false
        },
        "agenthoursinterval": {
          "description": "Agent Hours interval",
          "readOnly": true,
          "$ref": "#/definitions/License Reservation Interval"
        }
      }
    },
    "DSS Symbol File": {
      "type": "object",
      "properties": {
        "appname": {
          "type": "string",
          "description": "Application name",
          "readOnly": true
        },
        "appversion": {
          "type": "string",
          "description": "Application version",
          "readOnly": true
        },
        "os": {
          "type": "string",
          "description": "Operating system",
          "readOnly": true,
          "enum": [
            "IOS",
            "ANDROID"
          ]
        },
        "filelength": {
          "type": "integer",
          "format": "int64",
          "description": "File size in bytes",
          "readOnly": true
        },
        "filemodtime": {
          "type": "integer",
          "format": "int64",
          "description": "Last modification time of file",
          "readOnly": true
        },
        "buildtime": {
          "type": "integer",
          "format": "int64",
          "description": "Timestamp of build (only relevant for iOS)",
          "readOnly": true
        },
        "uuid": {
          "type": "string",
          "description": "UUID of build (only relevant for iOS)",
          "readOnly": true
        },
        "uploading": {
          "type": "boolean",
          "description": "true if file is still being uploaded",
          "readOnly": true,
          "default": false
        }
      },
      "description": "Symbol file descriptor"
    },
    "Agent Mapping": {
      "type": "object",
      "required": [
        "agentnamepattern"
      ],
      "properties": {
        "alias": {
          "type": "string",
          "description": "Alias of the Agent Mapping (unique within Agent Group)",
          "readOnly": true
        },
        "agentnamepattern": {
          "type": "string",
          "description": "Case-insensitive pattern for the name of the Agent",
          "readOnly": true
        },
        "agentnamematchtype": {
          "type": "string",
          "example": "starts",
          "description": "Matching type of the Agent name pattern",
          "readOnly": true,
          "enum": [
            "starts",
            "ends",
            "contains",
            "equals",
            "regex"
          ]
        },
        "hostnamepattern": {
          "type": "string",
          "description": "Case-insensitive pattern for the host name of the Agent",
          "readOnly": true
        },
        "hostnamematchtype": {
          "type": "string",
          "example": "starts",
          "description": "Matching type of the host name pattern",
          "readOnly": true,
          "enum": [
            "starts",
            "ends",
            "contains",
            "equals",
            "regex"
          ]
        }
      }
    },
    "Tasks": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "description": "List of available tasks",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Task or Monitor Reference"
          }
        }
      }
    },
    "PureLytics Stream": {
      "type": "object",
      "required": [
        "exporttype",
        "sessionid",
        "timeframeend",
        "timeframestart"
      ],
      "properties": {
        "sessionid": {
          "type": "string",
          "description": "ID of the system profile or stored session to be exported from",
          "readOnly": true
        },
        "timeframestart": {
          "type": "string",
          "example": "2016-04-25T21:34:01.000+02:00",
          "description": "A start date and time for the data that should be exported in ISO 8601 format",
          "readOnly": true
        },
        "timeframeend": {
          "type": "string",
          "example": "2016-04-25T21:34:01.000+02:00",
          "description": "An end date and time for the data that should be exported in ISO 8601 format",
          "readOnly": true
        },
        "exporttype": {
          "type": "string",
          "description": "The type of data that should be exported",
          "readOnly": true,
          "enum": [
            "ALL",
            "USERACTION",
            "VISIT"
          ]
        },
        "target": {
          "description": "Specification of the target to be streamed to",
          "readOnly": true,
          "$ref": "#/definitions/PureLytics Stream Target"
        }
      }
    },
    "Duration": {
      "type": "object",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Timeunit of duration",
          "readOnly": true,
          "enum": [
            "MILLISECONDS",
            "SECONDS",
            "MINUTES",
            "HOURS",
            "DAYS",
            "WEEKS",
            "MONTHS",
            "YEARS"
          ]
        },
        "value": {
          "type": "integer",
          "format": "int64",
          "description": "Duration value",
          "readOnly": true
        }
      }
    },
    "System Profile Role Mapping Definition": {
      "type": "object",
      "required": [
        "role",
        "systemprofile"
      ],
      "properties": {
        "systemprofile": {
          "type": "string",
          "description": "System Profile to grant permissions for, can be either an existing System Profile id, or '*' (matches all System Profiles), or '<user id>' (matches the personal System Profile of the respective user)",
          "readOnly": true
        },
        "role": {
          "type": "string",
          "description": "The role whose permissions should be granted for the specified System Profile",
          "readOnly": true
        }
      }
    },
    "Event Update": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the event",
          "readOnly": true,
          "enum": [
            "informational",
            "warning",
            "severe"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state of the event",
          "readOnly": true,
          "enum": [
            "Created",
            "InProgress",
            "Confirmed"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        }
      },
      "description": "Event update description"
    },
    "Password Changeset": {
      "type": "object",
      "required": [
        "currentpassword",
        "newpassword"
      ],
      "properties": {
        "currentpassword": {
          "type": "string",
          "description": "Current login password that should be changed",
          "readOnly": true
        },
        "newpassword": {
          "type": "string",
          "description": "New login password that should be applied",
          "readOnly": true
        }
      }
    },
    "User Group Definition": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the group",
          "readOnly": true
        },
        "managementrole": {
          "type": "string",
          "example": "Guest",
          "description": "Id of role whose permissions for server management should be granted to members of this group, default is Guest",
          "readOnly": true
        },
        "ldapgroup": {
          "type": "boolean",
          "description": "true if this user group corresponds to a group in LDAP",
          "readOnly": true,
          "default": false
        }
      }
    },
    "Role": {
      "type": "object",
      "required": [
        "id",
        "permissions"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique role id",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of role",
          "readOnly": true
        },
        "permissions": {
          "type": "array",
          "description": "List of permissions assigned to this role",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "System Profile Configurations": {
      "type": "object",
      "properties": {
        "configurations": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/System Profile Configuration"
          }
        }
      }
    },
    "TestRun Filter": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time of timeframe filter in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "endTime": {
          "type": "string",
          "example": "2016-06-11T11:35:31.000+02:00",
          "description": "End time of timeframe filter in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "extend": {
          "type": "string",
          "example": "runs",
          "description": "Level of detail returned in the response:\n- 'runs': only meta data,\n- 'results': meta data and individual test results,\n- 'measures': meta data, test results and measure values",
          "readOnly": true,
          "enum": [
            "runs",
            "results",
            "measures"
          ]
        },
        "status": {
          "type": "array",
          "description": "Filter test results by status.\nOnly relevant if response includes individual test results ('extend' set to 'results' or 'measures').\nPossible values: 'invalidated', 'volatile', 'degraded', 'improved', 'missing', 'passed'",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "lastNTestruns": {
          "type": "integer",
          "format": "int32",
          "description": "Max number of the most recent test runs to include",
          "readOnly": true
        },
        "lastNBuilds": {
          "type": "integer",
          "format": "int32",
          "description": "Max number of the most recent builds (versionbuild) values to include",
          "readOnly": true
        },
        "versionMajor": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "versionMinor": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "versionRevision": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "versionMilestone": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "versionBuild": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "array",
          "description": "Filter by test category.\nPossible values: 'unit', 'uidriven', 'performance', 'webapi', 'external'",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "finished": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "marker": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "platform": {
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Environment": {
      "type": "object",
      "required": [
        "apitoken",
        "dataexportenabled",
        "purepathdrilldownenabled",
        "securitygatewayurl",
        "securitygatewayused",
        "url",
        "webuiurl"
      ],
      "properties": {
        "dataexportenabled": {
          "type": "boolean",
          "description": "dataExportEnabled",
          "readOnly": true,
          "default": false
        },
        "purepathdrilldownenabled": {
          "type": "boolean",
          "description": "purePathDrillDownEnabled",
          "readOnly": true,
          "default": false
        },
        "securitygatewayused": {
          "type": "boolean",
          "description": "securityGatewayUsed",
          "readOnly": true,
          "default": false
        },
        "url": {
          "type": "string",
          "description": "url",
          "readOnly": true
        },
        "apitoken": {
          "type": "string",
          "description": "apiToken",
          "readOnly": true
        },
        "webuiurl": {
          "type": "string",
          "description": "webUiUrl",
          "readOnly": true
        },
        "securitygatewayurl": {
          "type": "string",
          "description": "securityGatewayUrl",
          "readOnly": true
        }
      },
      "description": "Environment reference"
    },
    "System Profile Role Mappings": {
      "type": "object",
      "required": [
        "mappings"
      ],
      "properties": {
        "mappings": {
          "type": "array",
          "description": "List of System Profile role mappings",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/System Profile Role Mapping"
          }
        }
      }
    },
    "License Information": {
      "type": "object",
      "properties": {
        "licensedto": {
          "type": "string",
          "description": "License owner",
          "readOnly": true
        },
        "licensenumber": {
          "type": "string",
          "description": "License number",
          "readOnly": true
        },
        "licenseedition": {
          "type": "string",
          "description": "Edition",
          "readOnly": true
        },
        "usedvolumepercentage": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "nextvolumerenewaldate": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Volume renewal date in ISO8601 format",
          "readOnly": true
        },
        "validfrom": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "License valid from this date in ISO8601 format",
          "readOnly": true
        },
        "expiredate": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Expiration date in ISO8601 format",
          "readOnly": true
        },
        "currentuemtransactions": {
          "type": "integer",
          "format": "int64",
          "description": "Current number of UEM transactions",
          "readOnly": true
        },
        "maximaluemtransactions": {
          "type": "integer",
          "format": "int64",
          "description": "Maximal number of UEM transactions, -1 if not supported",
          "readOnly": true
        },
        "licensedagents": {
          "type": "array",
          "description": "Licensed agent technologies",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Agent License Information"
          }
        }
      },
      "description": "Details about the active license"
    },
    "Alerts": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "description": "List of alert references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Alert Reference"
          }
        }
      }
    },
    "Measurement": {
      "type": "object",
      "properties": {
        "source": {
          "readOnly": true,
          "$ref": "#/definitions/Source"
        },
        "value": {
          "type": "number",
          "format": "double",
          "readOnly": true
        }
      },
      "description": "Measurement contributing to a measure threshold violation"
    },
    "Alert Suppressions": {
      "type": "object",
      "properties": {
        "alertsuppressions": {
          "type": "array",
          "description": "Alert Suppression references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Daily Calendar": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "example": "08:00",
          "description": "Start of the timerange in format HH:MM",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "16:45",
          "description": "End of the timerange in format HH:MM",
          "readOnly": true
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "userid"
      ],
      "properties": {
        "userid": {
          "type": "string",
          "description": "Unique user account name",
          "readOnly": true
        },
        "fullname": {
          "type": "string",
          "description": "Full name of the user",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "Email address of the user",
          "readOnly": true
        },
        "ldapuser": {
          "type": "boolean",
          "description": "true if this user corresponds to a user in LDAP",
          "readOnly": true,
          "default": false
        }
      }
    },
    "License Reservation Technology": {
      "type": "object",
      "required": [
        "technology"
      ],
      "properties": {
        "technology": {
          "type": "string",
          "description": "Technology",
          "readOnly": true,
          "enum": [
            "JAVA",
            "WOSIS",
            "SDK",
            "RIA",
            "WEBSERVER",
            "PHP",
            "MESSAGEBROKER",
            "ZOS",
            "SYSMONITORING",
            "NOSQL",
            "NODEJS",
            "DATABASE"
          ]
        },
        "reserved": {
          "type": "integer",
          "format": "int32",
          "description": "Reserved",
          "readOnly": true
        },
        "maximumallowed": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Maximum allowed",
          "readOnly": true
        },
        "useagenthours": {
          "type": "boolean",
          "example": true,
          "description": "Agent Hours usage allowed",
          "readOnly": true,
          "default": false
        }
      }
    },
    "System Profiles": {
      "type": "object",
      "properties": {
        "systemprofiles": {
          "type": "array",
          "description": "List of System Profiles",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/System Profile Reference"
          }
        }
      }
    },
    "Generic HTTP": {
      "type": "object",
      "required": [
        "basichttpauthentication",
        "index",
        "maxqueuesize",
        "password",
        "untrustedssl",
        "url",
        "username"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the target",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "The username for basic HTTP authentication",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "description": "The password for basic HTTP authentication",
          "readOnly": true
        },
        "maxqueuesize": {
          "type": "integer",
          "format": "int32",
          "description": "The Maximum number of documents per request",
          "readOnly": true
        },
        "untrustedssl": {
          "type": "boolean",
          "description": "Allow untrusted SSL certificates",
          "readOnly": true,
          "default": false
        },
        "basichttpauthentication": {
          "type": "boolean",
          "description": "Enable basic HTTP authentication",
          "readOnly": true,
          "default": false
        },
        "index": {
          "type": "string",
          "description": "Index identifier",
          "readOnly": true
        }
      }
    },
    "LDAP configuration": {
      "type": "object",
      "required": [
        "basedn",
        "binddn",
        "bindpassword",
        "groupdescriptionattribute",
        "groupobjectclass",
        "host",
        "memberattribute",
        "port",
        "useraccountattribute",
        "useremailattribute",
        "usernameattribute",
        "usessl"
      ],
      "properties": {
        "host": {
          "type": "string",
          "description": "The host name that is running the LDAP server",
          "readOnly": true
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "example": 389,
          "description": "The port which is used to connect to the LDAP server",
          "readOnly": true
        },
        "usessl": {
          "type": "boolean",
          "description": "Encrypt connecto to the LDAP server",
          "readOnly": true,
          "default": false
        },
        "binddn": {
          "type": "string",
          "example": "cn=dtd,ou=users,dc=company,dc=com",
          "description": "Bind DN needs to be specified if anonymous search is disabled",
          "readOnly": true
        },
        "bindpassword": {
          "type": "string",
          "description": "The password for the Bind DN",
          "readOnly": true
        },
        "basedn": {
          "type": "string",
          "example": "ou=users,dc=company,dc=com",
          "description": "The LDAP name of the root node to search for user credentials",
          "readOnly": true
        },
        "useraccountattribute": {
          "type": "string",
          "example": "sAMAccountName",
          "description": "Search attribute for the user's login name",
          "readOnly": true
        },
        "usernameattribute": {
          "type": "string",
          "example": "name",
          "description": "Search attribute for the user's name",
          "readOnly": true
        },
        "useremailattribute": {
          "type": "string",
          "example": "mail",
          "description": "Search attribute for the user's email address",
          "readOnly": true
        },
        "memberattribute": {
          "type": "string",
          "example": "memberOf",
          "description": "Search attribute for the group membership of the user account",
          "readOnly": true
        },
        "groupobjectclass": {
          "type": "string",
          "example": "group",
          "description": "Search attribute to identify groups in the LDAP system",
          "readOnly": true
        },
        "groupdescriptionattribute": {
          "type": "string",
          "example": "description",
          "description": "Search attribute for the group's description",
          "readOnly": true
        },
        "groupmemberattribute": {
          "type": "string",
          "example": "member",
          "description": "Search attribute fo the group's members",
          "readOnly": true
        },
        "certificatefingerprint": {
          "type": "string",
          "example": "43 51 43 a1 b5 fc 8b b7 0a 3a a9 b1 0f 66 73 a8",
          "description": "Hexadecimal representation of the MD5 fingerprint of the SSL certificate to trust",
          "readOnly": true
        }
      }
    },
    "Agent Mappings": {
      "type": "object",
      "properties": {
        "agentmappings": {
          "type": "array",
          "description": "List of Agent mapping references",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ResponseReferenceBase"
          }
        }
      }
    },
    "Deployment Event": {
      "type": "object",
      "required": [
        "message",
        "systemprofile"
      ],
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the event",
          "readOnly": true,
          "enum": [
            "informational",
            "warning",
            "severe"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state of the event",
          "readOnly": true,
          "enum": [
            "Created",
            "InProgress",
            "Confirmed"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "systemprofile": {
          "type": "string",
          "description": "System Profile name",
          "readOnly": true
        },
        "application": {
          "type": "string",
          "description": "Application name",
          "readOnly": true
        }
      },
      "description": "Deployment event record description"
    },
    "Role Permissions Mapping": {
      "type": "object",
      "required": [
        "permissions"
      ],
      "properties": {
        "permissions": {
          "type": "array",
          "description": "List of permission ids",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Source": {
      "type": "object",
      "properties": {
        "sourcetype": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "Server",
            "Collector",
            "AgentGroup",
            "Agent",
            "Monitor"
          ]
        },
        "name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Dashboard Permission Mappings": {
      "type": "object",
      "required": [
        "mappings"
      ],
      "properties": {
        "mappings": {
          "type": "array",
          "description": "List of dashboard permission mappings",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Dashboard Permission Mapping"
          }
        }
      }
    },
    "Monitor": {
      "type": "object",
      "properties": {
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "example": "Every 10 Seconds",
          "description": "Name of defined schedule",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "executiontarget": {
          "type": "string",
          "example": "Dynatrace Collector@myhost",
          "description": "Execution target (Server or Collector name)",
          "readOnly": true
        },
        "ispaused": {
          "type": "boolean",
          "description": "true if scheduling of monitor is suspended",
          "readOnly": true,
          "default": false
        },
        "type": {
          "type": "string",
          "example": "Unix System Monitor",
          "description": "Monitor type, required for creation, ignored for update",
          "readOnly": true
        },
        "taskparameters": {
          "type": "object",
          "description": "Configuration parameters",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "Elasticsearch": {
      "type": "object",
      "required": [
        "basichttpauthentication",
        "index",
        "maxqueuesize",
        "password",
        "untrustedssl",
        "url",
        "username",
        "version6"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the Elasticsearch cluster",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "description": "The username for basic HTTP authentication",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "description": "The password for basic HTTP authentication",
          "readOnly": true
        },
        "maxqueuesize": {
          "type": "integer",
          "format": "int32",
          "description": "The Maximum number of documents per request",
          "readOnly": true
        },
        "untrustedssl": {
          "type": "boolean",
          "description": "Allow untrusted SSL certificates",
          "readOnly": true,
          "default": false
        },
        "basichttpauthentication": {
          "type": "boolean",
          "description": "Enable basic HTTP authentication",
          "readOnly": true,
          "default": false
        },
        "index": {
          "type": "string",
          "description": "Index identifier",
          "readOnly": true
        },
        "version6": {
          "type": "boolean",
          "description": "Stream to Elasticsearch 6+",
          "readOnly": true,
          "default": false
        }
      }
    },
    "License UEM Reservation": {
      "type": "object",
      "required": [
        "systemprofile"
      ],
      "properties": {
        "systemprofile": {
          "type": "string",
          "description": "System Profile",
          "readOnly": true
        },
        "application": {
          "type": "string",
          "description": "Application",
          "readOnly": true
        },
        "visits": {
          "type": "integer",
          "format": "int64",
          "description": "Visits",
          "readOnly": true
        },
        "useunreserved": {
          "type": "boolean",
          "example": true,
          "description": "Use unreserved Visits",
          "readOnly": true,
          "default": false
        },
        "interval": {
          "description": "Interval",
          "readOnly": true,
          "$ref": "#/definitions/License Reservation Interval"
        }
      }
    },
    "Task Definition": {
      "type": "object",
      "properties": {
        "businesshours": {
          "type": "string",
          "description": "Name of defined business hours",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "example": "Every 10 Seconds",
          "description": "Name of defined schedule",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "executiontarget": {
          "type": "string",
          "example": "Dynatrace Collector@myhost",
          "description": "Execution target (Server or Collector name)",
          "readOnly": true
        },
        "parameters": {
          "type": "object",
          "description": "Task configuration parameters",
          "readOnly": true,
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "example": "Memory Snapshot",
          "description": "Task type, required for creation, ignored for update",
          "readOnly": true
        }
      }
    },
    "User Group": {
      "type": "object",
      "required": [
        "groupid",
        "managementrole"
      ],
      "properties": {
        "groupid": {
          "type": "string",
          "description": "Unique user group id",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Description of user group",
          "readOnly": true
        },
        "managementrole": {
          "description": "Role which defines the permissions for server management which are granted to members of this group",
          "readOnly": true,
          "$ref": "#/definitions/ResponseReferenceBase"
        },
        "ldapgroup": {
          "type": "boolean",
          "description": "true if this user group corresponds to a group in LDAP",
          "readOnly": true,
          "default": false
        }
      }
    },
    "InputStream": {
      "type": "object"
    },
    "Error": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "HTTP error code",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Error message",
          "readOnly": true
        }
      },
      "description": "Error message"
    },
    "Host": {
      "type": "object",
      "required": [
        "expression",
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the expression",
          "readOnly": true,
          "enum": [
            "site",
            "hostGroup",
            "host"
          ]
        },
        "expression": {
          "type": "string",
          "description": "Host expression",
          "readOnly": true
        }
      }
    },
    "DeleteDumpSessionIdentifier": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Stored session type",
          "readOnly": true,
          "enum": [
            "purepath",
            "memdump_simple",
            "memdump_extended",
            "memdump_selective",
            "threaddump",
            "sampling"
          ]
        },
        "id": {
          "type": "string",
          "description": "Unique id of stored session",
          "readOnly": true
        },
        "systemprofile": {
          "type": "string",
          "description": "Name of the system profile the stored session belonged to",
          "readOnly": true
        }
      }
    },
    "License Reservations Global": {
      "type": "object",
      "properties": {
        "agentreservations": {
          "type": "array",
          "description": "List of all agent reservations",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/License Reservation"
          }
        },
        "uemreservations": {
          "type": "array",
          "description": "List of all uem reservations",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/License UEM Reservation"
          }
        }
      }
    },
    "Environments": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "description": "List of Environments",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/Environments Reference"
          }
        }
      }
    },
    "User Definition": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string",
          "description": "Full name of the user",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "description": "Email address of the user",
          "readOnly": true
        },
        "password": {
          "type": "string",
          "description": "Initial password of account, required for creation of new users, optional for update of existing users",
          "readOnly": true
        }
      }
    },
    "LDAP certificate": {
      "type": "object",
      "required": [
        "certificatefingerprint"
      ],
      "properties": {
        "certificatefingerprint": {
          "type": "string",
          "example": "43 51 43 a1 b5 fc 8b b7 0a 3a a9 b1 0f 66 73 a8",
          "description": "Hexadecimal representation of the MD5 fingerprint of the SSL certificate to trust",
          "readOnly": true
        }
      }
    },
    "External Test Measure": {
      "type": "object",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "timestamp": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Timestamp in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "unit": {
          "type": "string",
          "readOnly": true
        },
        "minValue": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "maxValue": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "color": {
          "type": "string",
          "example": "#FF0000",
          "readOnly": true
        }
      }
    },
    "Activation Status": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "ENABLED",
            "DISABLED"
          ]
        }
      },
      "description": "Activation state of a resource"
    },
    "System Profile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "System Profile id",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "readOnly": true,
          "default": false
        },
        "isrecording": {
          "type": "boolean",
          "description": "Session recording state",
          "readOnly": true,
          "default": false
        }
      },
      "description": "System Profile Metadata"
    },
    "Alert": {
      "type": "object",
      "required": [
        "message",
        "rule",
        "systemprofile"
      ],
      "properties": {
        "severity": {
          "type": "string",
          "description": "The severity of the alert",
          "readOnly": true,
          "enum": [
            "informational",
            "warning",
            "severe"
          ]
        },
        "state": {
          "type": "string",
          "description": "The state of the alert",
          "readOnly": true,
          "enum": [
            "Created",
            "InProgress",
            "Confirmed"
          ]
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "readOnly": true
        },
        "start": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "Start time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "end": {
          "type": "string",
          "example": "2016-05-11T11:35:31.170+02:00",
          "description": "End time in ISO 8601 compatible date/time of format: yyyy-MM-dd'T'HH:mm:ss.SSSXXX",
          "readOnly": true
        },
        "rule": {
          "type": "string",
          "description": "Incident Rule name",
          "readOnly": true
        },
        "systemprofile": {
          "type": "string",
          "description": "System Profile name",
          "readOnly": true
        }
      },
      "description": "Alert record description"
    },
    "Role Definition": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the role",
          "readOnly": true
        }
      }
    }
  }
}